.section .text
.global _start
_start:
    mov %rsp, %rbp
    movq $0, PROCESS_CREATE_FDTABLE(%rip)
    mov $1, %rax
    movsxd %eax, %rax
    push %rax
    mov $1, %rax
    movsxd %eax, %rax
    pop %rbx
    push %rcx
    mov %rbx, %rcx
    shl %cl, %rax
    pop %rcx
    push %rax
    mov PROCESS_CREATE_FDTABLE(%rip), %rax
    lea PROCESS_CREATE_FDTABLE(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, FD_TYPE_SERIAL(%rip)
    mov $0x0, %rax
    push %rax
    mov FD_TYPE_SERIAL(%rip), %rax
    lea FD_TYPE_SERIAL(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, FILE_OPS_SERIAL(%rip)
    movq $0, PROCESS_NEW(%rip)
    mov $0x0, %rax
    push %rax
    mov PROCESS_NEW(%rip), %rax
    lea PROCESS_NEW(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, PROCESS_READY(%rip)
    mov $0x1, %rax
    push %rax
    mov PROCESS_READY(%rip), %rax
    lea PROCESS_READY(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, PROCESS_RUNNING(%rip)
    mov $0x2, %rax
    push %rax
    mov PROCESS_RUNNING(%rip), %rax
    lea PROCESS_RUNNING(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, PROCESS_ZOMBIE(%rip)
    mov $0x3, %rax
    push %rax
    mov PROCESS_ZOMBIE(%rip), %rax
    lea PROCESS_ZOMBIE(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, PROCESS_IDLE(%rip)
    mov $0x4, %rax
    push %rax
    mov PROCESS_IDLE(%rip), %rax
    lea PROCESS_IDLE(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, PROCESS_BLOCKED(%rip)
    mov $0x5, %rax
    push %rax
    mov PROCESS_BLOCKED(%rip), %rax
    lea PROCESS_BLOCKED(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, PROCESS_MAX_FD(%rip)
    mov $64, %rax
    movsxd %eax, %rax
    push %rax
    mov PROCESS_MAX_FD(%rip), %rax
    lea PROCESS_MAX_FD(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, PROCESS_CREATE_STACK(%rip)
    mov $0, %rax
    movsxd %eax, %rax
    push %rax
    mov $1, %rax
    movsxd %eax, %rax
    pop %rbx
    push %rcx
    mov %rbx, %rcx
    shl %cl, %rax
    pop %rcx
    push %rax
    mov PROCESS_CREATE_STACK(%rip), %rax
    lea PROCESS_CREATE_STACK(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, O_APPEND(%rip)
    mov $3, %rax
    movsxd %eax, %rax
    push %rax
    mov $1, %rax
    movsxd %eax, %rax
    pop %rbx
    push %rcx
    mov %rbx, %rcx
    shl %cl, %rax
    pop %rcx
    push %rax
    mov O_APPEND(%rip), %rax
    lea O_APPEND(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, PCI_CONFIG_ADDRESS(%rip)
    mov $0xcf8, %rax
    push %rax
    mov PCI_CONFIG_ADDRESS(%rip), %rax
    lea PCI_CONFIG_ADDRESS(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, PCI_CONFIG_DATA(%rip)
    mov $0xcfc, %rax
    push %rax
    mov PCI_CONFIG_DATA(%rip), %rax
    lea PCI_CONFIG_DATA(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, AHCI_CLASS_CODE(%rip)
    mov $0x1, %rax
    push %rax
    mov AHCI_CLASS_CODE(%rip), %rax
    lea AHCI_CLASS_CODE(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, AHCI_SUBCLASS(%rip)
    mov $0x6, %rax
    push %rax
    mov AHCI_SUBCLASS(%rip), %rax
    lea AHCI_SUBCLASS(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, SATA_SIG_ATA(%rip)
    mov $0x00000101, %rax
    mov %eax, %eax
    push %rax
    mov SATA_SIG_ATA(%rip), %rax
    lea SATA_SIG_ATA(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, SATA_SIG_ATAPI(%rip)
    mov $0xeb140101, %rax
    mov %eax, %eax
    push %rax
    mov SATA_SIG_ATAPI(%rip), %rax
    lea SATA_SIG_ATAPI(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, SATA_SIG_SEMB(%rip)
    mov $0xc33c0101, %rax
    mov %eax, %eax
    push %rax
    mov SATA_SIG_SEMB(%rip), %rax
    lea SATA_SIG_SEMB(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, SATA_SIG_PM(%rip)
    mov $0x96690101, %rax
    mov %eax, %eax
    push %rax
    mov SATA_SIG_PM(%rip), %rax
    lea SATA_SIG_PM(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, HBA_PxCMD_ST(%rip)
    mov $0x0001, %rax
    mov %eax, %eax
    push %rax
    mov HBA_PxCMD_ST(%rip), %rax
    lea HBA_PxCMD_ST(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, HBA_PxCMD_FRE(%rip)
    mov $0x0010, %rax
    mov %eax, %eax
    push %rax
    mov HBA_PxCMD_FRE(%rip), %rax
    lea HBA_PxCMD_FRE(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, PIC_MASTER_COMMAND(%rip)
    mov $0x0020, %rax
    movzwq %ax, %rax
    push %rax
    mov PIC_MASTER_COMMAND(%rip), %rax
    lea PIC_MASTER_COMMAND(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movw %ax, (%rbx)
    movq $0, SYS_SERIAL_READ(%rip)
    mov $1001, %rax
    movsxd %eax, %rax
    push %rax
    mov SYS_SERIAL_READ(%rip), %rax
    lea SYS_SERIAL_READ(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, nullptr(%rip)
    mov $0, %rax
    movsxd %eax, %rax
    push %rax
    mov nullptr(%rip), %rax
    lea nullptr(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, irq_saved_rflags(%rip)
    movq $0, IST_ATTR_PRESENT(%rip)
    mov $128, %rax
    movzbq %al, %rax
    push %rax
    mov IST_ATTR_PRESENT(%rip), %rax
    lea IST_ATTR_PRESENT(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, IST_ATTR_DPL_KERNEL(%rip)
    mov $0, %rax
    movzbq %al, %rax
    push %rax
    mov IST_ATTR_DPL_KERNEL(%rip), %rax
    lea IST_ATTR_DPL_KERNEL(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, IST_ATTR_DPL_USER(%rip)
    mov $96, %rax
    movzbq %al, %rax
    push %rax
    mov IST_ATTR_DPL_USER(%rip), %rax
    lea IST_ATTR_DPL_USER(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, IST_ATTR_INTERRUPT_GATE(%rip)
    mov $14, %rax
    movzbq %al, %rax
    push %rax
    mov IST_ATTR_INTERRUPT_GATE(%rip), %rax
    lea IST_ATTR_INTERRUPT_GATE(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, IST_ATTR_TRAP_GATE(%rip)
    mov $15, %rax
    movzbq %al, %rax
    push %rax
    mov IST_ATTR_TRAP_GATE(%rip), %rax
    lea IST_ATTR_TRAP_GATE(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, HBA_PxCMD_FR(%rip)
    mov $0x4000, %rax
    mov %eax, %eax
    push %rax
    mov HBA_PxCMD_FR(%rip), %rax
    lea HBA_PxCMD_FR(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, PIC_MASTER_DATA(%rip)
    mov $0x0021, %rax
    movzwq %ax, %rax
    push %rax
    mov PIC_MASTER_DATA(%rip), %rax
    lea PIC_MASTER_DATA(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movw %ax, (%rbx)
    movq $0, PIC_SLAVE_COMMAND(%rip)
    mov $0x00a0, %rax
    movzwq %ax, %rax
    push %rax
    mov PIC_SLAVE_COMMAND(%rip), %rax
    lea PIC_SLAVE_COMMAND(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movw %ax, (%rbx)
    movq $0, PIC_SLAVE_DATA(%rip)
    mov $0x00a1, %rax
    movzwq %ax, %rax
    push %rax
    mov PIC_SLAVE_DATA(%rip), %rax
    lea PIC_SLAVE_DATA(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movw %ax, (%rbx)
    movq $0, PIC_EOI(%rip)
    mov $0x20, %rax
    movzbq %al, %rax
    push %rax
    mov PIC_EOI(%rip), %rax
    lea PIC_EOI(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, PIT_CHANNEL0(%rip)
    mov $0x0040, %rax
    movzwq %ax, %rax
    push %rax
    mov PIT_CHANNEL0(%rip), %rax
    lea PIT_CHANNEL0(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movw %ax, (%rbx)
    movq $0, PIT_COMMAND(%rip)
    mov $0x0043, %rax
    movzwq %ax, %rax
    push %rax
    mov PIT_COMMAND(%rip), %rax
    lea PIT_COMMAND(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movw %ax, (%rbx)
    movq $0, O_RDONLY(%rip)
    mov $0, %rax
    movsxd %eax, %rax
    push %rax
    mov $1, %rax
    movsxd %eax, %rax
    pop %rbx
    push %rcx
    mov %rbx, %rcx
    shl %cl, %rax
    pop %rcx
    push %rax
    mov O_RDONLY(%rip), %rax
    lea O_RDONLY(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, O_WRONLY(%rip)
    mov $1, %rax
    movsxd %eax, %rax
    push %rax
    mov $1, %rax
    movsxd %eax, %rax
    pop %rbx
    push %rcx
    mov %rbx, %rcx
    shl %cl, %rax
    pop %rcx
    push %rax
    mov O_WRONLY(%rip), %rax
    lea O_WRONLY(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, O_RDWR(%rip)
    mov $2, %rax
    movsxd %eax, %rax
    push %rax
    mov $1, %rax
    movsxd %eax, %rax
    pop %rbx
    push %rcx
    mov %rbx, %rcx
    shl %cl, %rax
    pop %rcx
    push %rax
    mov O_RDWR(%rip), %rax
    lea O_RDWR(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, BOOTBOOT_MMIO(%rip)
    mov $0xfffffffff8000000, %rax
    push %rax
    mov BOOTBOOT_MMIO(%rip), %rax
    lea BOOTBOOT_MMIO(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, KSTACK_BOTTOM(%rip)
    mov $0x0000000000001000, %rax
    push %rax
    mov KSTACK_BOTTOM(%rip), %rax
    lea KSTACK_BOTTOM(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, KSTACK_GUARD_PAGE(%rip)
    mov $0x0000000000000000, %rax
    push %rax
    mov KSTACK_GUARD_PAGE(%rip), %rax
    lea KSTACK_GUARD_PAGE(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, KSTACK_AREA_BOTTOM(%rip)
    mov $0xffffffff00000000, %rax
    push %rax
    mov KSTACK_AREA_BOTTOM(%rip), %rax
    lea KSTACK_AREA_BOTTOM(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, KSTACK_AREA_TOP(%rip)
    mov $0xfffffffff0000000, %rax
    push %rax
    mov KSTACK_AREA_TOP(%rip), %rax
    lea KSTACK_AREA_TOP(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, KERNEL_DATA_BOTTOM(%rip)
    mov $0xfffffffff7000000, %rax
    push %rax
    mov KERNEL_DATA_BOTTOM(%rip), %rax
    lea KERNEL_DATA_BOTTOM(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, GSDATA_PAGE(%rip)
    mov $0xfffffffff7000000, %rax
    push %rax
    mov GSDATA_PAGE(%rip), %rax
    lea GSDATA_PAGE(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, GDT_PAGE(%rip)
    mov $0xfffffffff7001000, %rax
    push %rax
    mov GDT_PAGE(%rip), %rax
    lea GDT_PAGE(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, IDT_PAGE(%rip)
    mov $0xfffffffff7002000, %rax
    push %rax
    mov IDT_PAGE(%rip), %rax
    lea IDT_PAGE(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, TSS_PAGE(%rip)
    mov $0xfffffffff7003000, %rax
    push %rax
    mov TSS_PAGE(%rip), %rax
    lea TSS_PAGE(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, KERNEL_DATA_TOP(%rip)
    mov $0xfffffffff7004000, %rax
    push %rax
    mov KERNEL_DATA_TOP(%rip), %rax
    lea KERNEL_DATA_TOP(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, KSTACK_TOP(%rip)
    mov $0x0000000000007000, %rax
    push %rax
    mov KSTACK_TOP(%rip), %rax
    lea KSTACK_TOP(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, BOOTBOOT_FB(%rip)
    mov $0xfffffffffc000000, %rax
    push %rax
    mov BOOTBOOT_FB(%rip), %rax
    lea BOOTBOOT_FB(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, BOOTBOOT_INFO(%rip)
    mov $0xffffffffffe00000, %rax
    push %rax
    mov BOOTBOOT_INFO(%rip), %rax
    lea BOOTBOOT_INFO(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, BOOTBOOT_ENV(%rip)
    mov $0xffffffffffe01000, %rax
    push %rax
    mov BOOTBOOT_ENV(%rip), %rax
    lea BOOTBOOT_ENV(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, BOOTBOOT_CORE(%rip)
    mov $0xffffffffffe02000, %rax
    push %rax
    mov BOOTBOOT_CORE(%rip), %rax
    lea BOOTBOOT_CORE(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, BOOTBOOT_STACK_TOP(%rip)
    mov $0x0000000000000000, %rax
    push %rax
    mov BOOTBOOT_STACK_TOP(%rip), %rax
    lea BOOTBOOT_STACK_TOP(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, USER_STACK_TOP(%rip)
    mov $0x00007ffffff00000, %rax
    push %rax
    mov USER_STACK_TOP(%rip), %rax
    lea USER_STACK_TOP(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, USER_STACK_BOTTOM(%rip)
    mov $0x00007fffffef0000, %rax
    push %rax
    mov USER_STACK_BOTTOM(%rip), %rax
    lea USER_STACK_BOTTOM(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, USER_GUARD_PAGE(%rip)
    mov $0x00007fffffeef000, %rax
    push %rax
    mov USER_GUARD_PAGE(%rip), %rax
    lea USER_GUARD_PAGE(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, USER_HEAP_TOP(%rip)
    mov $0x0000700000000000, %rax
    push %rax
    mov USER_HEAP_TOP(%rip), %rax
    lea USER_HEAP_TOP(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, USER_HEAP_BOTTOM(%rip)
    mov $0x0000100000000000, %rax
    push %rax
    mov USER_HEAP_BOTTOM(%rip), %rax
    lea USER_HEAP_BOTTOM(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, CMOS_REGISTER_HOURS(%rip)
    mov $0x04, %rax
    movzbq %al, %rax
    push %rax
    mov CMOS_REGISTER_HOURS(%rip), %rax
    lea CMOS_REGISTER_HOURS(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, HBA_PxCMD_CR(%rip)
    mov $0x8000, %rax
    mov %eax, %eax
    push %rax
    mov HBA_PxCMD_CR(%rip), %rax
    lea HBA_PxCMD_CR(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, HPET_MAIN_COUNTER(%rip)
    movq $0, HPET_FREQUENCY_FS(%rip)
    movq $0, HPET_SECONDS_BASE(%rip)
    movq $0, CMOS_IN(%rip)
    mov $0x70, %rax
    movzwq %ax, %rax
    push %rax
    mov CMOS_IN(%rip), %rax
    lea CMOS_IN(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movw %ax, (%rbx)
    movq $0, CMOS_OUT(%rip)
    mov $0x71, %rax
    movzwq %ax, %rax
    push %rax
    mov CMOS_OUT(%rip), %rax
    lea CMOS_OUT(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movw %ax, (%rbx)
    movq $0, CMOS_NMI_DISABLE_BIT(%rip)
    mov $0x80, %rax
    movzbq %al, %rax
    push %rax
    mov CMOS_NMI_DISABLE_BIT(%rip), %rax
    lea CMOS_NMI_DISABLE_BIT(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, CMOS_UPDATE_IN_PROG_BIT(%rip)
    mov $0x80, %rax
    movzbq %al, %rax
    push %rax
    mov CMOS_UPDATE_IN_PROG_BIT(%rip), %rax
    lea CMOS_UPDATE_IN_PROG_BIT(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, CMOS_REGISTER_SECONDS(%rip)
    mov $0x00, %rax
    movzbq %al, %rax
    push %rax
    mov CMOS_REGISTER_SECONDS(%rip), %rax
    lea CMOS_REGISTER_SECONDS(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, CMOS_REGISTER_MINUTES(%rip)
    mov $0x02, %rax
    movzbq %al, %rax
    push %rax
    mov CMOS_REGISTER_MINUTES(%rip), %rax
    lea CMOS_REGISTER_MINUTES(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, irq_disable_count(%rip)
    mov $0x0, %rax
    push %rax
    mov irq_disable_count(%rip), %rax
    lea irq_disable_count(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, CMOS_REGISTER_DAY(%rip)
    mov $0x07, %rax
    movzbq %al, %rax
    push %rax
    mov CMOS_REGISTER_DAY(%rip), %rax
    lea CMOS_REGISTER_DAY(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, CMOS_REGISTER_MONTH(%rip)
    mov $0x08, %rax
    movzbq %al, %rax
    push %rax
    mov CMOS_REGISTER_MONTH(%rip), %rax
    lea CMOS_REGISTER_MONTH(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, CMOS_REGISTER_YEAR(%rip)
    mov $0x09, %rax
    movzbq %al, %rax
    push %rax
    mov CMOS_REGISTER_YEAR(%rip), %rax
    lea CMOS_REGISTER_YEAR(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, CMOS_REGISTER_CENTURY(%rip)
    mov $0x32, %rax
    movzbq %al, %rax
    push %rax
    mov CMOS_REGISTER_CENTURY(%rip), %rax
    lea CMOS_REGISTER_CENTURY(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, CMOS_REGISTER_STATUSA(%rip)
    mov $0x0a, %rax
    movzbq %al, %rax
    push %rax
    mov CMOS_REGISTER_STATUSA(%rip), %rax
    lea CMOS_REGISTER_STATUSA(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, CMOS_REGISTER_STATUSB(%rip)
    mov $0x0b, %rax
    movzbq %al, %rax
    push %rax
    mov CMOS_REGISTER_STATUSB(%rip), %rax
    lea CMOS_REGISTER_STATUSB(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, PAGE_SIZE(%rip)
    mov $4096, %rax
    movsxd %eax, %rax
    push %rax
    mov PAGE_SIZE(%rip), %rax
    lea PAGE_SIZE(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, KSTACK_SIZE(%rip)
    mov $0x0000000000008000, %rax
    push %rax
    mov KSTACK_SIZE(%rip), %rax
    lea KSTACK_SIZE(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, KSTACK_TRAPFRAME(%rip)
    mov $0x0000000000007000, %rax
    push %rax
    mov KSTACK_TRAPFRAME(%rip), %rax
    lea KSTACK_TRAPFRAME(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, pma_head(%rip)
    mov $1, %rax
    neg %eax
    movsxd %eax, %rax
    push %rax
    mov pma_head(%rip), %rax
    lea pma_head(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, I32_MIN(%rip)
    mov $1, %rax
    push %rax
    mov $2147483647, %rax
    neg %eax
    pop %rbx
    sub %ebx, %eax
    push %rax
    mov I32_MIN(%rip), %rax
    lea I32_MIN(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, COM1(%rip)
    mov $0x3f8, %rax
    movzwq %ax, %rax
    push %rax
    mov COM1(%rip), %rax
    lea COM1(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movw %ax, (%rbx)
    movq $0, FB_ADDR(%rip)
    mov $0xfffffffffc000000, %rax
    push %rax
    mov FB_ADDR(%rip), %rax
    lea FB_ADDR(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, FB_WIDTH(%rip)
    mov $800, %rax
    movsxd %eax, %rax
    push %rax
    mov FB_WIDTH(%rip), %rax
    lea FB_WIDTH(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, FB_HEIGHT(%rip)
    mov $600, %rax
    movsxd %eax, %rax
    push %rax
    mov FB_HEIGHT(%rip), %rax
    lea FB_HEIGHT(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, COLOR_WHITE(%rip)
    mov $0x00ffffff, %rax
    mov %eax, %eax
    push %rax
    mov COLOR_WHITE(%rip), %rax
    lea COLOR_WHITE(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, COLOR_BLACK(%rip)
    mov $0x00000000, %rax
    mov %eax, %eax
    push %rax
    mov COLOR_BLACK(%rip), %rax
    lea COLOR_BLACK(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, COLOR_GRAY(%rip)
    mov $0x00aaaaaa, %rax
    mov %eax, %eax
    push %rax
    mov COLOR_GRAY(%rip), %rax
    lea COLOR_GRAY(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, I32_MAX(%rip)
    mov $2147483647, %rax
    push %rax
    mov I32_MAX(%rip), %rax
    lea I32_MAX(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, PMA_PAGES_LEFT(%rip)
    mov $0x0, %rax
    push %rax
    mov PMA_PAGES_LEFT(%rip), %rax
    lea PMA_PAGES_LEFT(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, PTE_PRESENT(%rip)
    mov $0, %rax
    movsxd %eax, %rax
    push %rax
    mov $1, %rax
    movsxd %eax, %rax
    pop %rbx
    push %rcx
    mov %rbx, %rcx
    shl %cl, %rax
    pop %rcx
    push %rax
    mov PTE_PRESENT(%rip), %rax
    lea PTE_PRESENT(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, PTE_WRITEABLE(%rip)
    mov $1, %rax
    movsxd %eax, %rax
    push %rax
    mov $1, %rax
    movsxd %eax, %rax
    pop %rbx
    push %rcx
    mov %rbx, %rcx
    shl %cl, %rax
    pop %rcx
    push %rax
    mov PTE_WRITEABLE(%rip), %rax
    lea PTE_WRITEABLE(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, PTE_USER(%rip)
    mov $2, %rax
    movsxd %eax, %rax
    push %rax
    mov $1, %rax
    movsxd %eax, %rax
    pop %rbx
    push %rcx
    mov %rbx, %rcx
    shl %cl, %rax
    pop %rcx
    push %rax
    mov PTE_USER(%rip), %rax
    lea PTE_USER(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, SYS_SERIAL_WRITE(%rip)
    mov $1000, %rax
    movsxd %eax, %rax
    push %rax
    mov SYS_SERIAL_WRITE(%rip), %rax
    lea SYS_SERIAL_WRITE(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, PTE_NX(%rip)
    mov $63, %rax
    movsxd %eax, %rax
    push %rax
    mov $1, %rax
    movsxd %eax, %rax
    pop %rbx
    push %rcx
    mov %rbx, %rcx
    shl %cl, %rax
    pop %rcx
    push %rax
    mov PTE_NX(%rip), %rax
    lea PTE_NX(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, kheap_brk(%rip)
    mov $0x0000010000000000, %rax
    push %rax
    mov kheap_brk(%rip), %rax
    lea kheap_brk(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, MEM_USED(%rip)
    mov $0x0, %rax
    push %rax
    mov MEM_USED(%rip), %rax
    lea MEM_USED(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, EFER_MSR(%rip)
    mov $0xc0000080, %rax
    mov %eax, %eax
    push %rax
    mov EFER_MSR(%rip), %rax
    lea EFER_MSR(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, WCONTINUED(%rip)
    mov $0x08, %rax
    mov %eax, %eax
    push %rax
    mov WCONTINUED(%rip), %rax
    lea WCONTINUED(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, errno(%rip)
    mov $0, %rax
    push %rax
    mov errno(%rip), %rax
    lea errno(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, ERR_BADF(%rip)
    mov $1, %rax
    push %rax
    mov ERR_BADF(%rip), %rax
    lea ERR_BADF(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, ERR_FAULT(%rip)
    mov $2, %rax
    push %rax
    mov ERR_FAULT(%rip), %rax
    lea ERR_FAULT(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, ERR_CHILD(%rip)
    mov $3, %rax
    push %rax
    mov ERR_CHILD(%rip), %rax
    lea ERR_CHILD(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, ERR_RANGE(%rip)
    mov $1000, %rax
    push %rax
    mov ERR_RANGE(%rip), %rax
    lea ERR_RANGE(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, ERR_MALFORMED(%rip)
    mov $1001, %rax
    push %rax
    mov ERR_MALFORMED(%rip), %rax
    lea ERR_MALFORMED(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, WNOHANG(%rip)
    mov $0x01, %rax
    mov %eax, %eax
    push %rax
    mov WNOHANG(%rip), %rax
    lea WNOHANG(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, WUNTRACED(%rip)
    mov $0x02, %rax
    mov %eax, %eax
    push %rax
    mov WUNTRACED(%rip), %rax
    lea WUNTRACED(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, WEXITED(%rip)
    mov $0x04, %rax
    mov %eax, %eax
    push %rax
    mov WEXITED(%rip), %rax
    lea WEXITED(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, PTE_HUGEPG(%rip)
    mov $7, %rax
    movsxd %eax, %rax
    push %rax
    mov $1, %rax
    movsxd %eax, %rax
    pop %rbx
    push %rcx
    mov %rbx, %rcx
    shl %cl, %rax
    pop %rcx
    push %rax
    mov PTE_HUGEPG(%rip), %rax
    lea PTE_HUGEPG(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, WNOWAIT(%rip)
    mov $0x10, %rax
    mov %eax, %eax
    push %rax
    mov WNOWAIT(%rip), %rax
    lea WNOWAIT(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, WTRAPPED(%rip)
    mov $0x20, %rax
    mov %eax, %eax
    push %rax
    mov WTRAPPED(%rip), %rax
    lea WTRAPPED(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, CLOCK_REALTIME(%rip)
    mov $0, %rax
    movsxd %eax, %rax
    push %rax
    mov CLOCK_REALTIME(%rip), %rax
    lea CLOCK_REALTIME(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, CLOCK_MONOTONIC(%rip)
    mov $1, %rax
    movsxd %eax, %rax
    push %rax
    mov CLOCK_MONOTONIC(%rip), %rax
    lea CLOCK_MONOTONIC(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, PI(%rip)
    mov $0x40490fdb, %eax
    push %rax
    mov PI(%rip), %rax
    lea PI(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, U64_MAX(%rip)
    mov $1, %rax
    neg %eax
    movsxd %eax, %rax
    push %rax
    mov U64_MAX(%rip), %rax
    lea U64_MAX(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, U32_MAX(%rip)
    mov $1, %rax
    neg %eax
    push %rax
    mov U32_MAX(%rip), %rax
    lea U32_MAX(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, U16_MAX(%rip)
    mov $1, %rax
    neg %eax
    movzwq %ax, %rax
    push %rax
    mov U16_MAX(%rip), %rax
    lea U16_MAX(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movw %ax, (%rbx)
    movq $0, U8_MAX(%rip)
    mov $1, %rax
    neg %eax
    movzbq %al, %rax
    push %rax
    mov U8_MAX(%rip), %rax
    lea U8_MAX(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, SYS_WRITE(%rip)
    mov $1, %rax
    movsxd %eax, %rax
    push %rax
    mov SYS_WRITE(%rip), %rax
    lea SYS_WRITE(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, GDT_ACCESS_TYPE(%rip)
    mov $16, %rax
    movzbq %al, %rax
    push %rax
    mov GDT_ACCESS_TYPE(%rip), %rax
    lea GDT_ACCESS_TYPE(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, GDT_ACCESS_EXECUTABLE(%rip)
    mov $8, %rax
    movzbq %al, %rax
    push %rax
    mov GDT_ACCESS_EXECUTABLE(%rip), %rax
    lea GDT_ACCESS_EXECUTABLE(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, GDT_ACCESS_DC(%rip)
    mov $4, %rax
    movzbq %al, %rax
    push %rax
    mov GDT_ACCESS_DC(%rip), %rax
    lea GDT_ACCESS_DC(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, GDT_ACCESS_RW(%rip)
    mov $2, %rax
    movzbq %al, %rax
    push %rax
    mov GDT_ACCESS_RW(%rip), %rax
    lea GDT_ACCESS_RW(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, STAR_MSR(%rip)
    mov $0xc0000081, %rax
    mov %eax, %eax
    push %rax
    mov STAR_MSR(%rip), %rax
    lea STAR_MSR(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, GDT_FLAGS_GRANULARITY(%rip)
    mov $128, %rax
    movzbq %al, %rax
    push %rax
    mov GDT_FLAGS_GRANULARITY(%rip), %rax
    lea GDT_FLAGS_GRANULARITY(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, GDT_FLAGS_DB(%rip)
    mov $64, %rax
    movzbq %al, %rax
    push %rax
    mov GDT_FLAGS_DB(%rip), %rax
    lea GDT_FLAGS_DB(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, GDT_FLAGS_LONGMODE(%rip)
    mov $32, %rax
    movzbq %al, %rax
    push %rax
    mov GDT_FLAGS_LONGMODE(%rip), %rax
    lea GDT_FLAGS_LONGMODE(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, SYS_READ(%rip)
    mov $0, %rax
    movsxd %eax, %rax
    push %rax
    mov SYS_READ(%rip), %rax
    lea SYS_READ(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, GDT_ACCESS_ACCESSED(%rip)
    mov $1, %rax
    movzbq %al, %rax
    push %rax
    mov GDT_ACCESS_ACCESSED(%rip), %rax
    lea GDT_ACCESS_ACCESSED(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, SYS_CLOSE(%rip)
    mov $3, %rax
    movsxd %eax, %rax
    push %rax
    mov SYS_CLOSE(%rip), %rax
    lea SYS_CLOSE(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, SYS_MMAP(%rip)
    mov $9, %rax
    movsxd %eax, %rax
    push %rax
    mov SYS_MMAP(%rip), %rax
    lea SYS_MMAP(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, SYS_MUNMAP(%rip)
    mov $11, %rax
    movsxd %eax, %rax
    push %rax
    mov SYS_MUNMAP(%rip), %rax
    lea SYS_MUNMAP(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, SYS_SCHED_YIELD(%rip)
    mov $24, %rax
    movsxd %eax, %rax
    push %rax
    mov SYS_SCHED_YIELD(%rip), %rax
    lea SYS_SCHED_YIELD(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, SYS_GETPID(%rip)
    mov $39, %rax
    movsxd %eax, %rax
    push %rax
    mov SYS_GETPID(%rip), %rax
    lea SYS_GETPID(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, SYS_FORK(%rip)
    mov $57, %rax
    movsxd %eax, %rax
    push %rax
    mov SYS_FORK(%rip), %rax
    lea SYS_FORK(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, SYS_EXIT(%rip)
    mov $60, %rax
    movsxd %eax, %rax
    push %rax
    mov SYS_EXIT(%rip), %rax
    lea SYS_EXIT(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, SYS_WAIT4(%rip)
    mov $61, %rax
    movsxd %eax, %rax
    push %rax
    mov SYS_WAIT4(%rip), %rax
    lea SYS_WAIT4(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, SYS_CLOCK_GETTIME(%rip)
    mov $228, %rax
    movsxd %eax, %rax
    push %rax
    mov SYS_CLOCK_GETTIME(%rip), %rax
    lea SYS_CLOCK_GETTIME(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, GS_BASE_MSR(%rip)
    mov $0xc0000101, %rax
    mov %eax, %eax
    push %rax
    mov GS_BASE_MSR(%rip), %rax
    lea GS_BASE_MSR(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, ELFMAG2(%rip)
    movb $76, %al
    push %rax
    mov ELFMAG2(%rip), %rax
    lea ELFMAG2(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, ELFMAG3(%rip)
    movb $70, %al
    push %rax
    mov ELFMAG3(%rip), %rax
    lea ELFMAG3(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, ELFMAG1(%rip)
    movb $69, %al
    push %rax
    mov ELFMAG1(%rip), %rax
    lea ELFMAG1(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, ELFMAG0(%rip)
    mov $0x7f, %rax
    movzbq %al, %rax
    push %rax
    mov ELFMAG0(%rip), %rax
    lea ELFMAG0(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, KERNEL_GS_BASE_MSR(%rip)
    mov $0xc0000102, %rax
    mov %eax, %eax
    push %rax
    mov KERNEL_GS_BASE_MSR(%rip), %rax
    lea KERNEL_GS_BASE_MSR(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, ELF_PF_X(%rip)
    mov $0x1, %rax
    push %rax
    mov ELF_PF_X(%rip), %rax
    lea ELF_PF_X(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, ELF_PF_W(%rip)
    mov $0x2, %rax
    push %rax
    mov ELF_PF_W(%rip), %rax
    lea ELF_PF_W(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, ELF_PF_R(%rip)
    mov $0x4, %rax
    push %rax
    mov ELF_PF_R(%rip), %rax
    lea ELF_PF_R(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, GDT_ACCESS_PRESENT(%rip)
    mov $128, %rax
    movzbq %al, %rax
    push %rax
    mov GDT_ACCESS_PRESENT(%rip), %rax
    lea GDT_ACCESS_PRESENT(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, GDT_ACCESS_DPL_KERNEL(%rip)
    mov $0, %rax
    movzbq %al, %rax
    push %rax
    mov GDT_ACCESS_DPL_KERNEL(%rip), %rax
    lea GDT_ACCESS_DPL_KERNEL(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, GDT_ACCESS_DPL_USER(%rip)
    mov $96, %rax
    movzbq %al, %rax
    push %rax
    mov GDT_ACCESS_DPL_USER(%rip), %rax
    lea GDT_ACCESS_DPL_USER(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    movq $0, FMASK_MSR(%rip)
    mov $0xc0000084, %rax
    mov %eax, %eax
    push %rax
    mov FMASK_MSR(%rip), %rax
    lea FMASK_MSR(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, LSTAR_MSR(%rip)
    mov $0xc0000082, %rax
    mov %eax, %eax
    push %rax
    mov LSTAR_MSR(%rip), %rax
    lea LSTAR_MSR(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, INIT_SERIAL_STATUS(%rip)
    call init_serial
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov INIT_SERIAL_STATUS(%rip), %rax
    lea INIT_SERIAL_STATUS(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, INIT_PMA_STATUS(%rip)
    call init_pma
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov INIT_PMA_STATUS(%rip), %rax
    lea INIT_PMA_STATUS(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, INIT_PAGING_STATUS(%rip)
    call init_paging
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov INIT_PAGING_STATUS(%rip), %rax
    lea INIT_PAGING_STATUS(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, jstring_f32_base2(%rip)
    sub $8, %rsp
    movq $0, -8(%rbp)
    mov $512, %rax
    movsxd %eax, %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L240
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    mov jstring_f32_base2(%rip), %rax
    lea jstring_f32_base2(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov $0, %rax
    push %rax
    call L240
    add $8, %rsp
    push %rax
    pop %rax
    push %rax
    push %rax
    call L36
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    pop %rax
    movq %rax, sin(%rip)
    mov $0, %rax
    push %rax
    call L240
    add $8, %rsp
    push %rax
    pop %rax
    push %rax
    push %rax
    call L36
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    pop %rax
    push %rax
    mov sin(%rip), %rax
    mov sin(%rip), %rcx
    push %rax
    push %rax
    call L38
    pop %rax
    pop %rax
    push %rax
    pop %rax
    push %rax
    push %rax
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rax, %rcx
    movq %rcx, -32(%rbp)
    call L37
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    add $8, %rsp
    pop %rax
    push %rax
    movq -8(%rbp), %rax
    push %rax
    call L38
    pop %rax
    push %rax
    mov $0, %rax
    push %rax
    call L241
    add $16, %rsp
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    mov %rax, %rcx
    mov $0, %rax
    push %rax
    call L240
    add $8, %rsp
    push %rax
    pop %rax
    push %rax
    push %rax
    call L29
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    pop %rax
    movq %rax, sout(%rip)
    mov $0, %rax
    push %rax
    call L240
    add $8, %rsp
    push %rax
    pop %rax
    push %rax
    push %rax
    call L29
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    pop %rax
    push %rax
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    push %rax
    push %rax
    call L31
    pop %rax
    pop %rax
    push %rax
    pop %rax
    push %rax
    push %rax
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rax, %rcx
    movq %rcx, -32(%rbp)
    call L30
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    add $8, %rsp
    pop %rax
    push %rax
    movq -8(%rbp), %rax
    push %rax
    call L31
    pop %rax
    push %rax
    mov $0, %rax
    push %rax
    call L241
    add $16, %rsp
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    mov %rax, %rcx
    movq $0, INIT_GDT_STATUS(%rip)
    call init_gdt
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov INIT_GDT_STATUS(%rip), %rax
    lea INIT_GDT_STATUS(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, INIT_IDT_STATUS(%rip)
    call init_idt
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov INIT_IDT_STATUS(%rip), %rax
    lea INIT_IDT_STATUS(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, INIT_PIC_STATUS(%rip)
    call init_pic
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov INIT_PIC_STATUS(%rip), %rax
    lea INIT_PIC_STATUS(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, INIT_SYSCALL_STATUS(%rip)
    call init_syscall
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov INIT_SYSCALL_STATUS(%rip), %rax
    lea INIT_SYSCALL_STATUS(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movq $0, current_process(%rip)
    mov $0, %rax
    movsxd %eax, %rax
    push %rax
    mov current_process(%rip), %rax
    lea current_process(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov $32, %rax
    push %rax
    call L240
    add $8, %rsp
    push %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    pop %rax
    push %rax
    push %rax
    call L327
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    pop %rax
    movq %rax, process_queue(%rip)
    mov $24, %rax
    push %rax
    call L240
    add $8, %rsp
    push %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    pop %rax
    push %rax
    push %rax
    call L117
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    pop %rax
    movq %rax, all_processes(%rip)
    movq $0, kstack_ptr(%rip)
    mov KSTACK_AREA_BOTTOM(%rip), %rax
    lea KSTACK_AREA_BOTTOM(%rip), %rcx
    push %rax
    mov kstack_ptr(%rip), %rax
    lea kstack_ptr(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, pid_ptr(%rip)
    mov $1, %rax
    movsxd %eax, %rax
    push %rax
    mov pid_ptr(%rip), %rax
    lea pid_ptr(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    movq $0, curr_process(%rip)
    push %rbp
    mov %rsp, %rbp
    call init_acpi
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    call init_serial_file_ops
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    call init_ahci
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    call shell
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    sub $8, %rsp
    movq $0, -8(%rbp)
    mov $0x604, %rax
    movzwq %ax, %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movw %ax, (%rbx)
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov $0x2000, %rax
    movzwq %ax, %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movw %ax, (%rbx)
    call L262
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    sub $8, %rsp
    movq $0, -8(%rbp)
    lea L330(%rip), %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L297
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -8(%rbp)
    mov $0, %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    mov -8(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp

L257:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    call pt_get_current
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call pt_switch_to_kernel
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov $0x0, %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
L331:
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    setb %al
    movzx %al, %rax
    cmp $0, %rax
    je L333
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    push %rax
    push %rcx
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rax, %rbx
    pop %rcx
    pop %rax
    push %rax
    lea (%rax, %rbx, 1), %rax
    mov %rax, %rcx
    pop %rax
    movzbl (%rax, %rbx, 1), %eax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    call L203
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
L332:
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    incq (%rcx)
    jmp L331
L333:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L225
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov $0x0, %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -16(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp

L249:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    call pt_get_current
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call pt_switch_to_kernel
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov CLOCK_REALTIME(%rip), %rax
    lea CLOCK_REALTIME(%rip), %rcx
    push %rax
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    sete %al
    movzx %al, %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    sub $8, %rsp
    movq $0, -24(%rbp)
    lea L334(%rip), %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L298
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    sub $8, %rsp
    movq $0, -16(%rbp)
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov $16, %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L240
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L292
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rax, %rcx
    lea 0(%rax), %rcx
    lea 0(%rax), %rax
    movq (%rax), %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rax, %rcx
    lea 8(%rax), %rcx
    lea 8(%rax), %rax
    movq (%rax), %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov $16, %rax
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L241
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L225
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    mov %rax, %rcx
    lea 0(%rax), %rcx
    lea 0(%rax), %rax
    movq (%rax), %rax
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    push %rax
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    mov %rax, %rcx
    lea 8(%rax), %rcx
    lea 8(%rax), %rax
    movq (%rax), %rax
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov $0x0, %rax
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -40(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $32, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $32, %rsp

L250:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    call pt_get_current
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call pt_switch_to_kernel
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    sub $8, %rsp
    movq $0, -16(%rbp)
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov nullptr(%rip), %rax
    lea nullptr(%rip), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L335
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    sub $8, %rsp
    movq $0, -24(%rbp)
    lea L336(%rip), %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L298
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    sub $8, %rsp
    movq $0, -16(%rbp)
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov 32(%rbp), %rax
    lea 32(%rbp), %rcx
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov nullptr(%rip), %rax
    lea nullptr(%rip), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L337
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    sub $8, %rsp
    movq $0, -24(%rbp)
    lea L338(%rip), %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L298
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov $1, %rax
    neg %eax
    movsxd %eax, %rax
    push %rax
    mov 40(%rbp), %rax
    lea 40(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    setg %al
    movzx %al, %rax
    cmp $0, %rax
    je L339
    push %rax
    mov $0, %rax
    movsxd %eax, %rax
    push %rax
    mov 40(%rbp), %rax
    lea 40(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    setne %al
    movzx %al, %rax
    mov %rax, %rbx
    pop %rax
    test %eax, %eax
    setne %al
    movzx %al, %rax
    test %ebx, %ebx
    setne %bl
    movzx %bl, %rbx
    and %rbx, %rax
L339:
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    sub $8, %rsp
    movq $0, -24(%rbp)
    lea L340(%rip), %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L298
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov $0, %rax
    movsxd %eax, %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -24(%rbp)
    call get_cur_proc
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov $0x0, %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rax, %rcx
    lea 564(%rax), %rcx
    lea 564(%rax), %rax
    push %rax
    call L116
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    pop %rbx
    cmp %rbx, %rax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L341
    jmp L342
L341:
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L225
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov ERR_CHILD(%rip), %rax
    lea ERR_CHILD(%rip), %rcx
    neg %eax
    movsxd %eax, %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -32(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L342
L342:
L343:
    mov $0, %rax
    movsxd %eax, %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    je L345
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov $0x0, %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
L346:
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rax, %rcx
    lea 564(%rax), %rcx
    lea 564(%rax), %rax
    push %rax
    call L116
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    setb %al
    movzx %al, %rax
    cmp $0, %rax
    je L348
    sub $8, %rsp
    movq $0, -40(%rbp)
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rax, %rcx
    lea 564(%rax), %rcx
    lea 564(%rax), %rax
    movq %rcx, -48(%rbp)
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L349
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq (%rax), %rax
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov PROCESS_ZOMBIE(%rip), %rax
    lea PROCESS_ZOMBIE(%rip), %rcx
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rax, %rcx
    lea 24(%rax), %rcx
    lea 24(%rax), %rax
    movq (%rax), %rax
    pop %rbx
    cmp %rbx, %rax
    setne %al
    movzx %al, %rax
    cmp $0, %rax
    jne L350
    jmp L351
L350:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    jmp L347
    jmp L351
L351:
    mov $1, %rax
    neg %eax
    movsxd %eax, %rax
    push %rax
    mov 40(%rbp), %rax
    lea 40(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L354
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rax, %rcx
    lea 0(%rax), %rcx
    lea 0(%rax), %rax
    movq (%rax), %rax
    push %rax
    mov 40(%rbp), %rax
    lea 40(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    sete %al
    movzx %al, %rax
    mov %rax, %rbx
    pop %rax
    test %eax, %eax
    setne %al
    movzx %al, %rax
    test %ebx, %ebx
    setne %bl
    movzx %bl, %rbx
    or %rbx, %rax
L354:
    cmp $0, %rax
    jne L352
    jmp L353
L352:
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rax, %rcx
    lea 0(%rax), %rcx
    lea 0(%rax), %rax
    movq (%rax), %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rax, %rcx
    lea 0(%rax), %rcx
    lea 0(%rax), %rax
    movq (%rax), %rax
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L282
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    jmp L348
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L353
L353:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
L347:
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    incq (%rcx)
    jmp L346
L348:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    mov WNOHANG(%rip), %rax
    lea WNOHANG(%rip), %rcx
    push %rax
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    pop %rbx
    and %rbx, %rax
    cmp $0, %rax
    jne L355
    jmp L356
L355:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L345
    jmp L356
L356:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
L344:
    jmp L343
L345:
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L225
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -32(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp

L251:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    call pt_get_current
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call pt_switch_to_kernel
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    sub $8, %rsp
    movq $0, -16(%rbp)
    call get_cur_proc
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rax, %rcx
    lea 44(%rax), %rcx
    lea 44(%rax), %rax
    push %rax
    push %rcx
    mov 32(%rbp), %rax
    lea 32(%rbp), %rcx
    movsxd %eax, %rax
    mov %rax, %rbx
    pop %rcx
    pop %rax
    push %rax
    lea (%rax, %rbx, 8), %rax
    mov %rax, %rcx
    pop %rax
    movq (%rax, %rbx, 8), %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov nullptr(%rip), %rax
    lea nullptr(%rip), %rcx
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L357
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    cmp $0, %rax
    jne L358
    jmp L359
L358:
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L225
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov ERR_BADF(%rip), %rax
    lea ERR_BADF(%rip), %rcx
    neg %eax
    movsxd %eax, %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -32(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L359
L359:
    mov O_RDONLY(%rip), %rax
    lea O_RDONLY(%rip), %rcx
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rax, %rcx
    lea 32(%rax), %rcx
    lea 32(%rax), %rax
    movq (%rax), %rax
    pop %rbx
    cmp %rbx, %rax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L362
    push %rax
    mov O_RDWR(%rip), %rax
    lea O_RDWR(%rip), %rcx
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rax, %rcx
    lea 32(%rax), %rcx
    lea 32(%rax), %rax
    movq (%rax), %rax
    pop %rbx
    cmp %rbx, %rax
    sete %al
    movzx %al, %rax
    mov %rax, %rbx
    pop %rax
    test %eax, %eax
    setne %al
    movzx %al, %rax
    test %ebx, %ebx
    setne %bl
    movzx %bl, %rbx
    or %rbx, %rax
L362:
    test %eax, %eax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L360
    jmp L361
L360:
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L225
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov ERR_BADF(%rip), %rax
    lea ERR_BADF(%rip), %rcx
    neg %eax
    movsxd %eax, %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -32(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L361
L361:
    sub $8, %rsp
    movq $0, -32(%rbp)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L240
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -40(%rbp)
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -64(%rbp)
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L273
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov $0, %rax
    movsxd %eax, %rax
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    setg %al
    movzx %al, %rax
    cmp $0, %rax
    jne L363
    jmp L364
L363:
    sub $8, %rsp
    movq $0, -48(%rbp)
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -64(%rbp)
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -72(%rbp)
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    push %rax
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -80(%rbp)
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    push %rax
    mov -80(%rbp), %rax
    lea -80(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L247
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $32, %rsp
    movsxd %eax, %rax
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov $0, %rax
    movsxd %eax, %rax
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    setl %al
    movzx %al, %rax
    cmp $0, %rax
    jne L365
    jmp L366
L365:
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    jmp L366
L366:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    jmp L364
L364:
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L241
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L225
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -48(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $40, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $40, %rsp

L252:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    call pt_get_current
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call pt_switch_to_kernel
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    sub $8, %rsp
    movq $0, -16(%rbp)
    call get_cur_proc
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rax, %rcx
    lea 44(%rax), %rcx
    lea 44(%rax), %rax
    push %rax
    push %rcx
    mov 32(%rbp), %rax
    lea 32(%rbp), %rcx
    movsxd %eax, %rax
    mov %rax, %rbx
    pop %rcx
    pop %rax
    push %rax
    lea (%rax, %rbx, 8), %rax
    mov %rax, %rcx
    pop %rax
    movq (%rax, %rbx, 8), %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov nullptr(%rip), %rax
    lea nullptr(%rip), %rcx
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L357
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    cmp $0, %rax
    jne L367
    jmp L368
L367:
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L225
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov ERR_BADF(%rip), %rax
    lea ERR_BADF(%rip), %rcx
    neg %eax
    movsxd %eax, %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -32(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L368
L368:
    mov O_WRONLY(%rip), %rax
    lea O_WRONLY(%rip), %rcx
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rax, %rcx
    lea 32(%rax), %rcx
    lea 32(%rax), %rax
    movq (%rax), %rax
    pop %rbx
    cmp %rbx, %rax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L372
    push %rax
    mov O_RDWR(%rip), %rax
    lea O_RDWR(%rip), %rcx
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rax, %rcx
    lea 32(%rax), %rcx
    lea 32(%rax), %rax
    movq (%rax), %rax
    pop %rbx
    cmp %rbx, %rax
    sete %al
    movzx %al, %rax
    mov %rax, %rbx
    pop %rax
    test %eax, %eax
    setne %al
    movzx %al, %rax
    test %ebx, %ebx
    setne %bl
    movzx %bl, %rbx
    or %rbx, %rax
L372:
    cmp $0, %rax
    jne L371
    push %rax
    mov O_APPEND(%rip), %rax
    lea O_APPEND(%rip), %rcx
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rax, %rcx
    lea 32(%rax), %rcx
    lea 32(%rax), %rax
    movq (%rax), %rax
    pop %rbx
    cmp %rbx, %rax
    sete %al
    movzx %al, %rax
    mov %rax, %rbx
    pop %rax
    test %eax, %eax
    setne %al
    movzx %al, %rax
    test %ebx, %ebx
    setne %bl
    movzx %bl, %rbx
    or %rbx, %rax
L371:
    test %eax, %eax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L369
    jmp L370
L369:
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L225
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov ERR_BADF(%rip), %rax
    lea ERR_BADF(%rip), %rcx
    neg %eax
    movsxd %eax, %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -32(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L370
L370:
    sub $8, %rsp
    movq $0, -32(%rbp)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L240
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -40(%rbp)
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -64(%rbp)
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -72(%rbp)
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L248
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $32, %rsp
    movsxd %eax, %rax
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov $0, %rax
    movsxd %eax, %rax
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    setl %al
    movzx %al, %rax
    cmp $0, %rax
    jne L373
    jmp L374
L373:
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L241
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L225
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -48(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $40, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L374
L374:
    sub $8, %rsp
    movq $0, -48(%rbp)
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -64(%rbp)
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -72(%rbp)
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L274
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -64(%rbp)
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L241
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L225
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -56(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $48, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $48, %rsp

L253:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    call pt_get_current
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call pt_switch_to_kernel
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    sub $8, %rsp
    movq $0, -16(%rbp)
    call get_cur_proc
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rax, %rcx
    lea 44(%rax), %rcx
    lea 44(%rax), %rax
    push %rax
    push %rcx
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    movsxd %eax, %rax
    mov %rax, %rbx
    pop %rcx
    pop %rax
    push %rax
    lea (%rax, %rbx, 8), %rax
    mov %rax, %rcx
    pop %rax
    movq (%rax, %rbx, 8), %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov nullptr(%rip), %rax
    lea nullptr(%rip), %rcx
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rax, %rcx
    lea 44(%rax), %rcx
    lea 44(%rax), %rax
    push %rax
    push %rcx
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    movsxd %eax, %rax
    mov %rax, %rbx
    pop %rcx
    pop %rax
    push %rax
    lea (%rax, %rbx, 8), %rax
    mov %rax, %rcx
    pop %rax
    movq (%rax, %rbx, 8), %rax
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov nullptr(%rip), %rax
    lea nullptr(%rip), %rcx
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L375
    jmp L376
L375:
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L225
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov $1, %rax
    neg %eax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    mov -32(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L376
L376:
    sub $8, %rsp
    movq $0, -32(%rbp)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L276
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L225
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    mov -40(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $32, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $32, %rsp

L254:
    push %rbp
    mov %rsp, %rbp
    call pt_switch_to_kernel
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    sub $8, %rsp
    movq $0, -8(%rbp)
    call get_cur_pid
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    call L281
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov BOOTBOOT_STACK_TOP(%rip), %rsp
    call scheduler
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    sub $8, %rsp
    movq $0, -8(%rbp)
    mov $0x0, %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -8(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp

sys_getpid:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    call get_cur_pid
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -8(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp

sys_fork:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    call pt_get_current
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call pt_switch_to_kernel
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    sub $8, %rsp
    movq $0, -16(%rbp)
    call get_cur_proc
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -24(%rbp)
    call get_user_trapframe
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -32(%rbp)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L279
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rax, %rcx
    lea 0(%rax), %rcx
    lea 0(%rax), %rax
    movq (%rax), %rax
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov KSTACK_TRAPFRAME(%rip), %rax
    lea KSTACK_TRAPFRAME(%rip), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rax, %rcx
    lea 8(%rax), %rcx
    lea 8(%rax), %rax
    movq (%rax), %rax
    pop %rbx
    add %rbx, %rax
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov $0x0, %rax
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rax, %rcx
    lea 0(%rax), %rcx
    lea 0(%rax), %rax
    movq (%rax), %rax
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L225
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -56(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $48, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $48, %rsp

sys_sched_yield:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    call pt_get_current
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call pt_switch_to_kernel
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    call yield
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L225
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov $0x0, %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -16(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp

L255:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    call pt_get_current
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call pt_switch_to_kernel
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    sub $8, %rsp
    movq $0, -16(%rbp)
    call get_cur_proc
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov $0x0, %rax
    push %rax
    mov PAGE_SIZE(%rip), %rax
    lea PAGE_SIZE(%rip), %rcx
    push %rax
    mov 48(%rbp), %rax
    lea 48(%rbp), %rcx
    pop %rbx
    xor %rdx, %rdx
    div %rbx
    mov %rdx, %rax
    pop %rbx
    cmp %rbx, %rax
    setne %al
    movzx %al, %rax
    cmp $0, %rax
    jne L377
    jmp L378
L377:
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L225
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov $1, %rax
    neg %eax
    movsxd %eax, %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -24(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L378
L378:
    mov USER_HEAP_TOP(%rip), %rax
    lea USER_HEAP_TOP(%rip), %rcx
    push %rax
    mov 48(%rbp), %rax
    lea 48(%rbp), %rcx
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rax, %rcx
    lea 16(%rax), %rcx
    lea 16(%rax), %rax
    movq (%rax), %rax
    pop %rbx
    add %rbx, %rax
    pop %rbx
    cmp %rbx, %rax
    seta %al
    movzx %al, %rax
    cmp $0, %rax
    jne L379
    jmp L380
L379:
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L225
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov $1, %rax
    neg %eax
    movsxd %eax, %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -24(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L380
L380:
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rax, %rcx
    lea 16(%rax), %rcx
    lea 16(%rax), %rax
    movq (%rax), %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov $0x0, %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
L381:
    mov 48(%rbp), %rax
    lea 48(%rbp), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    setb %al
    movzx %al, %rax
    cmp $0, %rax
    je L383
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    pop %rbx
    add %rbx, %rax
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov PTE_USER(%rip), %rax
    lea PTE_USER(%rip), %rcx
    push %rax
    mov 32(%rbp), %rax
    lea 32(%rbp), %rcx
    pop %rbx
    or %rbx, %rax
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L230
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
L382:
    mov PAGE_SIZE(%rip), %rax
    lea PAGE_SIZE(%rip), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    pop %rbx
    add %rbx, %rax
    movq %rax, (%rcx)
    jmp L381
L383:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    mov 48(%rbp), %rax
    lea 48(%rbp), %rcx
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rax, %rcx
    lea 16(%rax), %rcx
    lea 16(%rax), %rax
    movq (%rax), %rax
    pop %rbx
    add %rbx, %rax
    movq %rax, (%rcx)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L225
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -32(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp

L256:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    call pt_get_current
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call pt_switch_to_kernel
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    mov $0x0, %rax
    push %rax
    mov PAGE_SIZE(%rip), %rax
    lea PAGE_SIZE(%rip), %rcx
    push %rax
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    pop %rbx
    xor %rdx, %rdx
    div %rbx
    mov %rdx, %rax
    pop %rbx
    cmp %rbx, %rax
    setne %al
    movzx %al, %rax
    cmp $0, %rax
    jne L386
    push %rax
    mov $0x0, %rax
    push %rax
    mov PAGE_SIZE(%rip), %rax
    lea PAGE_SIZE(%rip), %rcx
    push %rax
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    pop %rbx
    xor %rdx, %rdx
    div %rbx
    mov %rdx, %rax
    pop %rbx
    cmp %rbx, %rax
    setne %al
    movzx %al, %rax
    mov %rax, %rbx
    pop %rax
    test %eax, %eax
    setne %al
    movzx %al, %rax
    test %ebx, %ebx
    setne %bl
    movzx %bl, %rbx
    or %rbx, %rax
L386:
    cmp $0, %rax
    jne L384
    jmp L385
L384:
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov $1, %rax
    neg %eax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    mov -16(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    pop %rbp
    ret
    jmp L385
L385:
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov $0x0, %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
L387:
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    setb %al
    movzx %al, %rax
    cmp $0, %rax
    je L389
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    pop %rbx
    add %rbx, %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L228
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    test %eax, %eax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L390
    jmp L391
L390:
    sub $8, %rsp
    movq $0, -32(%rbp)
    lea L392(%rip), %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L297
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    jmp L391
L391:
    sub $8, %rsp
    movq $0, -32(%rbp)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L233
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L231
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L219
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
L388:
    mov PAGE_SIZE(%rip), %rax
    lea PAGE_SIZE(%rip), %rcx
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    pop %rbx
    add %rbx, %rax
    movq %rax, (%rcx)
    jmp L387
L389:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L225
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov $0, %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    mov -16(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp

syscall_handler:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    sub $8, %rsp
    movq $0, -16(%rbp)
    sub $8, %rsp
    movq $0, -24(%rbp)
    sub $8, %rsp
    movq $0, -32(%rbp)
    sub $8, %rsp
    movq $0, -40(%rbp)
    sub $8, %rsp
    movq $0, -48(%rbp)
    sub $8, %rsp
    movq $0, -56(%rbp)
    movq %rax, -8(%rbp)
    movq %rdi, -16(%rbp)
    movq %rsi, -24(%rbp)
    movq %rdx, -32(%rbp)
    movq %r10, -40(%rbp)
    movq %r8, -48(%rbp)
    movq %r9, -56(%rbp)
    mov $0, %rax
    cmp $0, %rax
    jne L393
    jmp L394
L393:
    sub $8, %rsp
    movq $0, -64(%rbp)
    call pt_get_current
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call pt_switch_to_kernel
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    sub $8, %rsp
    movq $0, -72(%rbp)
    sub $8, %rsp
    movq $0, -80(%rbp)
    sub $8, %rsp
    movq $0, -88(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -88(%rbp)
    sub $8, %rsp
    movq $0, -96(%rbp)
    lea L395(%rip), %rax
    push %rax
    mov -96(%rbp), %rax
    lea -96(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -80(%rbp)
    sub $8, %rsp
    movq $0, -88(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -88(%rbp), %rax
    lea -88(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L312
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -72(%rbp)
    sub $8, %rsp
    movq $0, -80(%rbp)
    lea L396(%rip), %rax
    push %rax
    mov -80(%rbp), %rax
    lea -80(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    sub $8, %rsp
    movq $0, -72(%rbp)
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    push %rax
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L225
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    jmp L394
L394:
    mov SYS_READ(%rip), %rax
    lea SYS_READ(%rip), %rcx
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L397
    mov SYS_WRITE(%rip), %rax
    lea SYS_WRITE(%rip), %rcx
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L398
    mov SYS_CLOSE(%rip), %rax
    lea SYS_CLOSE(%rip), %rcx
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L399
    mov SYS_EXIT(%rip), %rax
    lea SYS_EXIT(%rip), %rcx
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L400
    mov SYS_SCHED_YIELD(%rip), %rax
    lea SYS_SCHED_YIELD(%rip), %rcx
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L401
    mov SYS_MMAP(%rip), %rax
    lea SYS_MMAP(%rip), %rcx
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L402
    mov SYS_MUNMAP(%rip), %rax
    lea SYS_MUNMAP(%rip), %rcx
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L403
    mov SYS_GETPID(%rip), %rax
    lea SYS_GETPID(%rip), %rcx
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L404
    mov SYS_FORK(%rip), %rax
    lea SYS_FORK(%rip), %rcx
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L405
    mov SYS_WAIT4(%rip), %rax
    lea SYS_WAIT4(%rip), %rcx
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L406
    mov SYS_CLOCK_GETTIME(%rip), %rax
    lea SYS_CLOCK_GETTIME(%rip), %rcx
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L407
    mov SYS_SERIAL_WRITE(%rip), %rax
    lea SYS_SERIAL_WRITE(%rip), %rcx
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L408
    mov SYS_SERIAL_READ(%rip), %rax
    lea SYS_SERIAL_READ(%rip), %rcx
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L409
    jmp L410
L397:
    sub $8, %rsp
    movq $0, -64(%rbp)
    sub $8, %rsp
    movq $0, -72(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %eax, %eax
    push %rax
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    sub $8, %rsp
    movq $0, -80(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -80(%rbp), %rax
    lea -80(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -88(%rbp)
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    push %rax
    mov -88(%rbp), %rax
    lea -88(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L251
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -64(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $56, %rsp
    pop %rbp
    ret
    jmp L410
L398:
    sub $8, %rsp
    movq $0, -64(%rbp)
    sub $8, %rsp
    movq $0, -72(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %eax, %eax
    push %rax
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    sub $8, %rsp
    movq $0, -80(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -80(%rbp), %rax
    lea -80(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -88(%rbp)
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    push %rax
    mov -88(%rbp), %rax
    lea -88(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L252
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -64(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $56, %rsp
    pop %rbp
    ret
    jmp L410
L399:
    sub $8, %rsp
    movq $0, -64(%rbp)
    sub $8, %rsp
    movq $0, -72(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %eax, %eax
    push %rax
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    call L253
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    movsxd %eax, %rax
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -64(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $56, %rsp
    pop %rbp
    ret
    jmp L410
L400:
    sub $8, %rsp
    movq $0, -64(%rbp)
    sub $8, %rsp
    movq $0, -72(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %eax, %eax
    push %rax
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    call L254
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -64(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $56, %rsp
    pop %rbp
    ret
    jmp L410
L401:
    sub $8, %rsp
    movq $0, -64(%rbp)
    call sys_sched_yield
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -64(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $56, %rsp
    pop %rbp
    ret
    jmp L410
L402:
    sub $8, %rsp
    movq $0, -64(%rbp)
    sub $8, %rsp
    movq $0, -72(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -80(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -80(%rbp), %rax
    lea -80(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -88(%rbp)
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    push %rax
    mov -88(%rbp), %rax
    lea -88(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -96(%rbp)
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    push %rax
    mov -96(%rbp), %rax
    lea -96(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -104(%rbp)
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %eax, %eax
    push %rax
    mov -104(%rbp), %rax
    lea -104(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    sub $8, %rsp
    movq $0, -112(%rbp)
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    push %rax
    mov -112(%rbp), %rax
    lea -112(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L255
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $48, %rsp
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -64(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $56, %rsp
    pop %rbp
    ret
    jmp L410
L403:
    sub $8, %rsp
    movq $0, -64(%rbp)
    sub $8, %rsp
    movq $0, -72(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -80(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -80(%rbp), %rax
    lea -80(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L256
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    movsxd %eax, %rax
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -64(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $56, %rsp
    pop %rbp
    ret
    jmp L410
L404:
    sub $8, %rsp
    movq $0, -64(%rbp)
    call sys_getpid
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -64(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $56, %rsp
    pop %rbp
    ret
    jmp L410
L405:
    sub $8, %rsp
    movq $0, -64(%rbp)
    call sys_fork
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -64(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $56, %rsp
    pop %rbp
    ret
    jmp L410
L406:
    sub $8, %rsp
    movq $0, -64(%rbp)
    sub $8, %rsp
    movq $0, -72(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -80(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -80(%rbp), %rax
    lea -80(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -88(%rbp)
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %eax, %eax
    push %rax
    mov -88(%rbp), %rax
    lea -88(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    sub $8, %rsp
    movq $0, -96(%rbp)
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    push %rax
    mov -96(%rbp), %rax
    lea -96(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L250
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $32, %rsp
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -64(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $56, %rsp
    pop %rbp
    ret
    jmp L410
L407:
    sub $8, %rsp
    movq $0, -64(%rbp)
    sub $8, %rsp
    movq $0, -72(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -80(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -80(%rbp), %rax
    lea -80(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L249
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -64(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $56, %rsp
    pop %rbp
    ret
    jmp L410
L408:
    sub $8, %rsp
    movq $0, -64(%rbp)
    sub $8, %rsp
    movq $0, -72(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -80(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -80(%rbp), %rax
    lea -80(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L257
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -64(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $56, %rsp
    pop %rbp
    ret
    jmp L410
L409:
    sub $8, %rsp
    movq $0, -64(%rbp)
    sub $8, %rsp
    movq $0, -72(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -80(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -80(%rbp), %rax
    lea -80(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L258
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -64(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $56, %rsp
    pop %rbp
    ret
    jmp L410
L410:
    sub $8, %rsp
    movq $0, -64(%rbp)
    lea L411(%rip), %rax
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L297
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -64(%rbp)
    mov $1, %rax
    neg %eax
    movsxd %eax, %rax
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -64(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $56, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $56, %rsp

L258:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    call pt_get_current
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call pt_switch_to_kernel
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov $0x0, %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
L412:
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    setb %al
    movzx %al, %rax
    cmp $0, %rax
    je L414
    call read_serial
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    push %rax
    push %rcx
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rax, %rbx
    pop %rcx
    pop %rax
    push %rax
    lea (%rax, %rbx, 1), %rax
    mov %rax, %rcx
    pop %rax
    movzbl (%rax, %rbx, 1), %eax
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
L413:
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    incq (%rcx)
    jmp L412
L414:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L225
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov $0x0, %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -16(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp

L259:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    mov %eax, %eax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov $32, %rax
    movsxd %eax, %rax
    push %rax
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    pop %rbx
    push %rcx
    mov %rbx, %rcx
    shr %cl, %rax
    pop %rcx
    mov %eax, %eax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    movl 24(%rbp), %ecx
    movl -8(%rbp), %eax
    movl -16(%rbp), %edx
    wrmsr
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    pop %rbp
    ret

L260:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    sub $8, %rsp
    movq $0, -16(%rbp)
    movl 16(%rbp), %ecx
    rdmsr
    movl %eax, -8(%rbp)
    movl %edx, -16(%rbp)
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %eax, %eax
    push %rax
    mov $32, %rax
    movsxd %eax, %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %eax, %eax
    pop %rbx
    push %rcx
    mov %rbx, %rcx
    shl %cl, %rax
    pop %rcx
    pop %rbx
    or %rbx, %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -24(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp

L261:
    push %rbp
    mov %rsp, %rbp
    movw 24(%rbp), %dx
    movb 16(%rbp), %al
    outb %al, %dx
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    pop %rbp
    ret

L262:
    push %rbp
    mov %rsp, %rbp
    movw 24(%rbp), %dx
    movw 16(%rbp), %ax
    outw %ax, %dx
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    pop %rbp
    ret

L263:
    push %rbp
    mov %rsp, %rbp
    movw 24(%rbp), %dx
    movl 16(%rbp), %eax
    outl %eax, %dx
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    pop %rbp
    ret

L264:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    movw 16(%rbp), %dx
    inb %dx, %al
    movb %al, -8(%rbp)
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    mov -16(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp

L265:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    movw 16(%rbp), %dx
    inl %dx, %eax
    movl %eax, -8(%rbp)
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    mov -16(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp

irq_disable:
    push %rbp
    mov %rsp, %rbp
    mov $0x0, %rax
    push %rax
    mov irq_disable_count(%rip), %rax
    lea irq_disable_count(%rip), %rcx
    pop %rbx
    cmp %rbx, %rax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L415
    jmp L416
L415:
    pushfq
    cli
    popq irq_saved_rflags(%rip)
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L416
L416:
    mov irq_disable_count(%rip), %rax
    lea irq_disable_count(%rip), %rcx
    incq (%rcx)
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    pop %rbp
    ret

irq_enable:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    mov $0x0, %rax
    push %rax
    mov irq_disable_count(%rip), %rax
    lea irq_disable_count(%rip), %rcx
    pop %rbx
    cmp %rbx, %rax
    setne %al
    movzx %al, %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    sub $8, %rsp
    movq $0, -16(%rbp)
    lea L417(%rip), %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L298
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov irq_disable_count(%rip), %rax
    lea irq_disable_count(%rip), %rcx
    decq (%rcx)
    mov $0x0, %rax
    push %rax
    mov irq_disable_count(%rip), %rax
    lea irq_disable_count(%rip), %rcx
    pop %rbx
    cmp %rbx, %rax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L418
    jmp L419
L418:
    pushq irq_saved_rflags(%rip)
    popfq
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L419
L419:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    pop %rbp
    ret

init_idt:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    lea L421(%rip), %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L420
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -8(%rbp)
    call pt_get_current
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov IDT_PAGE(%rip), %rax
    lea IDT_PAGE(%rip), %rcx
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -32(%rbp)
    call palloc
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov PTE_WRITEABLE(%rip), %rax
    lea PTE_WRITEABLE(%rip), %rcx
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L229
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $32, %rsp
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov IDT_PAGE(%rip), %rax
    lea IDT_PAGE(%rip), %rcx
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov $0, %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov PAGE_SIZE(%rip), %rax
    lea PAGE_SIZE(%rip), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L177
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov IDT_PAGE(%rip), %rax
    lea IDT_PAGE(%rip), %rcx
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -24(%rbp)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov $10, %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L240
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov $1, %rax
    movzwq %ax, %rax
    push %rax
    mov $256, %rax
    movzwq %ax, %rax
    push %rax
    mov $16, %rax
    movzwq %ax, %rax
    pop %rbx
    mul %bx
    pop %rbx
    sub %bx, %ax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rax, %rcx
    lea 0(%rax), %rcx
    lea 0(%rax), %rax
    movzwq (%rax), %rax
    mov %rcx, %rbx
    pop %rax
    movw %ax, (%rbx)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rax, %rcx
    lea 2(%rax), %rcx
    lea 2(%rax), %rax
    movq (%rax), %rax
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov $32, %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov timer_interrupt_entry(%rip), %rax
    lea timer_interrupt_entry(%rip), %rcx
    mov %rcx, %rax
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov $0x08, %rax
    movzwq %ax, %rax
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movw %ax, (%rbx)
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov $0x0, %rax
    movzbq %al, %rax
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    sub $8, %rsp
    movq $0, -64(%rbp)
    mov IST_ATTR_INTERRUPT_GATE(%rip), %rax
    lea IST_ATTR_INTERRUPT_GATE(%rip), %rcx
    push %rax
    mov IST_ATTR_DPL_KERNEL(%rip), %rax
    lea IST_ATTR_DPL_KERNEL(%rip), %rcx
    push %rax
    mov IST_ATTR_PRESENT(%rip), %rax
    lea IST_ATTR_PRESENT(%rip), %rcx
    pop %rbx
    or %rbx, %rax
    pop %rbx
    or %rbx, %rax
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    sub $8, %rsp
    movq $0, -72(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L266
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $48, %rsp
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L267
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -32(%rbp)
    lea L422(%rip), %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L420
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov $0, %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    mov -32(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp

shell:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    mov $24, %rax
    push %rax
    call L240
    add $8, %rsp
    push %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    pop %rax
    push %rax
    push %rax
    call L429
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    pop %rax
    movq %rax, -8(%rbp)
L434:
    mov $1, %rax
    cmp $0, %rax
    je L436
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -16(%rbp)
    sub $8, %rsp
    movq $0, -24(%rbp)
    lea L437(%rip), %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    sub $8, %rsp
    mov $24, %rax
    push %rax
    call L240
    add $8, %rsp
    push %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    pop %rax
    push %rax
    push %rax
    call L24
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    pop %rax
    movq %rax, -16(%rbp)
    mov sin(%rip), %rax
    mov sin(%rip), %rcx
    push %rax
    call L35
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    push %rax
    sub $8, %rsp
    movq $0, -32(%rbp)
    movb $32, %al
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    call L11
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    add $8, %rsp
    push %rax
    mov -16(%rbp), %rax
    mov -16(%rbp), %rcx
    push %rax
    push %rax
    call L28
    pop %rax
    pop %rax
    push %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    pop %rax
    push %rax
    push %rax
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rax, %rcx
    movq %rcx, -48(%rbp)
    call L25
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    add $8, %rsp
    pop %rax
    push %rax
    movq -24(%rbp), %rax
    push %rax
    call L28
    pop %rax
    push %rax
    mov $24, %rax
    push %rax
    call L241
    add $16, %rsp
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    mov %rax, %rcx
    mov $0x0, %rax
    push %rax
    mov -16(%rbp), %rax
    mov -16(%rbp), %rcx
    push %rax
    call L23
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    pop %rbx
    cmp %rbx, %rax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L438
    jmp L439
L438:
    push %rax
    push %rcx
    movq -16(%rbp), %rax
    push %rax
    call L28
    pop %rax
    push %rax
    mov $24, %rax
    push %rax
    call L241
    add $16, %rsp
    pop %rcx
    pop %rax
    add $8, %rsp
    jmp L435
    jmp L439
L439:
    sub $8, %rsp
    mov $24, %rax
    push %rax
    call L240
    add $8, %rsp
    push %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    pop %rax
    push %rax
    push %rax
    call L12
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    pop %rax
    movq %rax, -24(%rbp)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov -16(%rbp), %rax
    mov -16(%rbp), %rcx
    movq %rcx, -32(%rbp)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov $0, %rax
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    call L440
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    push %rax
    mov -24(%rbp), %rax
    mov -24(%rbp), %rcx
    push %rax
    push %rax
    call L17
    pop %rax
    pop %rax
    push %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    pop %rax
    push %rax
    push %rax
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rax, %rcx
    movq %rcx, -56(%rbp)
    call L13
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    add $8, %rsp
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    mov %rax, %rcx
    sub $8, %rsp
    movq $0, -32(%rbp)
    lea L447(%rip), %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L303
    push %rax
    push %rcx
    movq -24(%rbp), %rax
    push %rax
    call L17
    pop %rax
    push %rax
    mov $24, %rax
    push %rax
    call L241
    add $16, %rsp
    pop %rcx
    pop %rax
    add $16, %rsp
    cmp $0, %rax
    jne L441
    sub $8, %rsp
    mov $24, %rax
    push %rax
    call L240
    add $8, %rsp
    push %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    pop %rax
    push %rax
    push %rax
    call L12
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    pop %rax
    movq %rax, -24(%rbp)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov -16(%rbp), %rax
    mov -16(%rbp), %rcx
    movq %rcx, -32(%rbp)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov $0, %rax
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    call L440
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    push %rax
    mov -24(%rbp), %rax
    mov -24(%rbp), %rcx
    push %rax
    push %rax
    call L17
    pop %rax
    pop %rax
    push %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    pop %rax
    push %rax
    push %rax
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rax, %rcx
    movq %rcx, -56(%rbp)
    call L13
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    add $8, %rsp
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    mov %rax, %rcx
    sub $8, %rsp
    movq $0, -32(%rbp)
    lea L448(%rip), %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L303
    push %rax
    push %rcx
    movq -24(%rbp), %rax
    push %rax
    call L17
    pop %rax
    push %rax
    mov $24, %rax
    push %rax
    call L241
    add $16, %rsp
    pop %rcx
    pop %rax
    add $16, %rsp
    cmp $0, %rax
    jne L442
    sub $8, %rsp
    mov $24, %rax
    push %rax
    call L240
    add $8, %rsp
    push %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    pop %rax
    push %rax
    push %rax
    call L12
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    pop %rax
    movq %rax, -24(%rbp)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov -16(%rbp), %rax
    mov -16(%rbp), %rcx
    movq %rcx, -32(%rbp)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov $0, %rax
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    call L440
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    push %rax
    mov -24(%rbp), %rax
    mov -24(%rbp), %rcx
    push %rax
    push %rax
    call L17
    pop %rax
    pop %rax
    push %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    pop %rax
    push %rax
    push %rax
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rax, %rcx
    movq %rcx, -56(%rbp)
    call L13
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    add $8, %rsp
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    mov %rax, %rcx
    sub $8, %rsp
    movq $0, -32(%rbp)
    lea L449(%rip), %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L303
    push %rax
    push %rcx
    movq -24(%rbp), %rax
    push %rax
    call L17
    pop %rax
    push %rax
    mov $24, %rax
    push %rax
    call L241
    add $16, %rsp
    pop %rcx
    pop %rax
    add $16, %rsp
    cmp $0, %rax
    jne L443
    sub $8, %rsp
    mov $24, %rax
    push %rax
    call L240
    add $8, %rsp
    push %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    pop %rax
    push %rax
    push %rax
    call L12
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    pop %rax
    movq %rax, -24(%rbp)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov -16(%rbp), %rax
    mov -16(%rbp), %rcx
    movq %rcx, -32(%rbp)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov $0, %rax
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    call L440
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    push %rax
    mov -24(%rbp), %rax
    mov -24(%rbp), %rcx
    push %rax
    push %rax
    call L17
    pop %rax
    pop %rax
    push %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    pop %rax
    push %rax
    push %rax
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rax, %rcx
    movq %rcx, -56(%rbp)
    call L13
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    add $8, %rsp
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    mov %rax, %rcx
    sub $8, %rsp
    movq $0, -32(%rbp)
    lea L450(%rip), %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L303
    push %rax
    push %rcx
    movq -24(%rbp), %rax
    push %rax
    call L17
    pop %rax
    push %rax
    mov $24, %rax
    push %rax
    call L241
    add $16, %rsp
    pop %rcx
    pop %rax
    add $16, %rsp
    cmp $0, %rax
    jne L444
    jmp L445
L441:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    push %rax
    push %rcx
    movq -16(%rbp), %rax
    push %rax
    call L28
    pop %rax
    push %rax
    mov $24, %rax
    push %rax
    call L241
    add $16, %rsp
    pop %rcx
    pop %rax
    add $8, %rsp
    jmp L436
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L446
L442:
L451:
    mov $1, %rax
    cmp $0, %rax
    je L453
    mov $0x4, %rax
    push %rax
    mov -16(%rbp), %rax
    mov -16(%rbp), %rcx
    push %rax
    call L23
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    pop %rbx
    cmp %rbx, %rax
    setb %al
    movzx %al, %rax
    cmp $0, %rax
    jne L454
    jmp L455
L454:
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -24(%rbp)
    sub $8, %rsp
    movq $0, -32(%rbp)
    lea L456(%rip), %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L453
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L455
L455:
    mov $0, %rax
    push %rax
    mov errno(%rip), %rax
    lea errno(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    sub $8, %rsp
    movq $0, -24(%rbp)
    sub $8, %rsp
    mov $24, %rax
    push %rax
    call L240
    add $8, %rsp
    push %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    pop %rax
    push %rax
    push %rax
    call L12
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    pop %rax
    movq %rax, -32(%rbp)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov -16(%rbp), %rax
    mov -16(%rbp), %rcx
    movq %rcx, -40(%rbp)
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov $2, %rax
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    call L440
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    push %rax
    mov -32(%rbp), %rax
    mov -32(%rbp), %rcx
    push %rax
    push %rax
    call L17
    pop %rax
    pop %rax
    push %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    pop %rax
    push %rax
    push %rax
    sub $8, %rsp
    movq $0, -64(%rbp)
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rax, %rcx
    movq %rcx, -64(%rbp)
    call L13
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    add $8, %rsp
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    mov %rax, %rcx
    call L198
    push %rax
    push %rcx
    movq -32(%rbp), %rax
    push %rax
    call L17
    pop %rax
    push %rax
    mov $24, %rax
    push %rax
    call L241
    add $16, %rsp
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov errno(%rip), %rax
    lea errno(%rip), %rcx
    cmp $0, %rax
    jne L457
    jmp L458
L457:
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -32(%rbp)
    sub $8, %rsp
    movq $0, -40(%rbp)
    lea L459(%rip), %rax
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    jmp L453
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L458
L458:
    sub $8, %rsp
    mov $24, %rax
    push %rax
    call L240
    add $8, %rsp
    push %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    pop %rax
    push %rax
    push %rax
    call L12
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    pop %rax
    movq %rax, -32(%rbp)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov -16(%rbp), %rax
    mov -16(%rbp), %rcx
    movq %rcx, -40(%rbp)
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov $3, %rax
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    call L440
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    push %rax
    mov -32(%rbp), %rax
    mov -32(%rbp), %rcx
    push %rax
    push %rax
    call L17
    pop %rax
    pop %rax
    push %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    pop %rax
    push %rax
    push %rax
    sub $8, %rsp
    movq $0, -64(%rbp)
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rax, %rcx
    movq %rcx, -64(%rbp)
    call L13
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    add $8, %rsp
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    mov %rax, %rcx
    mov $0x2, %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    pop %rbx
    mul %rbx
    push %rax
    mov -32(%rbp), %rax
    mov -32(%rbp), %rcx
    push %rax
    call L6
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    pop %rbx
    cmp %rbx, %rax
    setne %al
    movzx %al, %rax
    cmp $0, %rax
    jne L460
    jmp L461
L460:
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -40(%rbp)
    sub $8, %rsp
    movq $0, -48(%rbp)
    lea L462(%rip), %rax
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    push %rax
    push %rcx
    movq -32(%rbp), %rax
    push %rax
    call L17
    pop %rax
    push %rax
    mov $24, %rax
    push %rax
    call L241
    add $16, %rsp
    pop %rcx
    pop %rax
    add $16, %rsp
    jmp L453
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L461
L461:
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov $1, %rax
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    sub $8, %rsp
    movq $0, -48(%rbp)
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L240
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov $0, %rax
    movzbq %al, %rax
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    sub $8, %rsp
    movq $0, -64(%rbp)
    mov $0x0, %rax
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
L463:
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    setb %al
    movzx %al, %rax
    cmp $0, %rax
    je L465
    sub $8, %rsp
    movq $0, -72(%rbp)
    sub $8, %rsp
    movq $0, -80(%rbp)
    mov -32(%rbp), %rax
    mov -32(%rbp), %rcx
    movq %rcx, -80(%rbp)
    sub $8, %rsp
    movq $0, -88(%rbp)
    mov $0x0, %rax
    push %rax
    mov $0x2, %rax
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    pop %rbx
    mul %rbx
    pop %rbx
    add %rbx, %rax
    push %rax
    mov -88(%rbp), %rax
    lea -88(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L300
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movzbq (%rax), %rax
    push %rax
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    sub $8, %rsp
    movq $0, -80(%rbp)
    sub $8, %rsp
    movq $0, -88(%rbp)
    mov -32(%rbp), %rax
    mov -32(%rbp), %rcx
    movq %rcx, -88(%rbp)
    sub $8, %rsp
    movq $0, -96(%rbp)
    mov $0x1, %rax
    push %rax
    mov $0x2, %rax
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    pop %rbx
    mul %rbx
    pop %rbx
    add %rbx, %rax
    push %rax
    mov -96(%rbp), %rax
    lea -96(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L300
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movzbq (%rax), %rax
    push %rax
    mov -80(%rbp), %rax
    lea -80(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    push %rax
    movb $48, %al
    pop %rbx
    cmp %bl, %al
    setbe %al
    movzx %al, %rax
    cmp $0, %rax
    je L470
    push %rax
    movb $57, %al
    push %rax
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    pop %rbx
    cmp %bl, %al
    setbe %al
    movzx %al, %rax
    mov %rax, %rbx
    pop %rax
    test %eax, %eax
    setne %al
    movzx %al, %rax
    test %ebx, %ebx
    setne %bl
    movzx %bl, %rbx
    and %rbx, %rax
L470:
    cmp $0, %rax
    jne L466
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    push %rax
    movb $97, %al
    pop %rbx
    cmp %bl, %al
    setbe %al
    movzx %al, %rax
    cmp $0, %rax
    je L471
    push %rax
    movb $102, %al
    push %rax
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    pop %rbx
    cmp %bl, %al
    setbe %al
    movzx %al, %rax
    mov %rax, %rbx
    pop %rax
    test %eax, %eax
    setne %al
    movzx %al, %rax
    test %ebx, %ebx
    setne %bl
    movzx %bl, %rbx
    and %rbx, %rax
L471:
    cmp $0, %rax
    jne L467
    jmp L468
L466:
    movb $48, %al
    push %rax
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    pop %rbx
    sub %bl, %al
    movb %al, (%rcx)
    jmp L469
L467:
    mov $10, %rax
    movzbq %al, %rax
    push %rax
    movb $97, %al
    push %rax
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    pop %rbx
    sub %bl, %al
    pop %rbx
    add %bl, %al
    push %rax
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    jmp L469
L468:
    mov $0, %rax
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    jmp L469
L469:
    mov -80(%rbp), %rax
    lea -80(%rbp), %rcx
    push %rax
    movb $48, %al
    pop %rbx
    cmp %bl, %al
    setbe %al
    movzx %al, %rax
    cmp $0, %rax
    je L476
    push %rax
    movb $57, %al
    push %rax
    mov -80(%rbp), %rax
    lea -80(%rbp), %rcx
    pop %rbx
    cmp %bl, %al
    setbe %al
    movzx %al, %rax
    mov %rax, %rbx
    pop %rax
    test %eax, %eax
    setne %al
    movzx %al, %rax
    test %ebx, %ebx
    setne %bl
    movzx %bl, %rbx
    and %rbx, %rax
L476:
    cmp $0, %rax
    jne L472
    mov -80(%rbp), %rax
    lea -80(%rbp), %rcx
    push %rax
    movb $97, %al
    pop %rbx
    cmp %bl, %al
    setbe %al
    movzx %al, %rax
    cmp $0, %rax
    je L477
    push %rax
    movb $102, %al
    push %rax
    mov -80(%rbp), %rax
    lea -80(%rbp), %rcx
    pop %rbx
    cmp %bl, %al
    setbe %al
    movzx %al, %rax
    mov %rax, %rbx
    pop %rax
    test %eax, %eax
    setne %al
    movzx %al, %rax
    test %ebx, %ebx
    setne %bl
    movzx %bl, %rbx
    and %rbx, %rax
L477:
    cmp $0, %rax
    jne L473
    jmp L474
L472:
    movb $48, %al
    push %rax
    mov -80(%rbp), %rax
    lea -80(%rbp), %rcx
    pop %rbx
    sub %bl, %al
    movb %al, (%rcx)
    jmp L475
L473:
    mov $10, %rax
    movzbq %al, %rax
    push %rax
    movb $97, %al
    push %rax
    mov -80(%rbp), %rax
    lea -80(%rbp), %rcx
    pop %rbx
    sub %bl, %al
    pop %rbx
    add %bl, %al
    push %rax
    mov -80(%rbp), %rax
    lea -80(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    jmp L475
L474:
    mov $0, %rax
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    jmp L475
L475:
    sub $8, %rsp
    movq $0, -88(%rbp)
    mov -80(%rbp), %rax
    lea -80(%rbp), %rcx
    push %rax
    mov $4, %rax
    movzbq %al, %rax
    push %rax
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    pop %rbx
    push %rcx
    mov %rbx, %rcx
    shl %cl, %al
    pop %rcx
    pop %rbx
    add %bl, %al
    push %rax
    mov -88(%rbp), %rax
    lea -88(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    mov -88(%rbp), %rax
    lea -88(%rbp), %rcx
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    push %rax
    push %rcx
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rax, %rbx
    pop %rcx
    pop %rax
    push %rax
    lea (%rax, %rbx, 1), %rax
    mov %rax, %rcx
    pop %rax
    movzbl (%rax, %rbx, 1), %eax
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    mov -88(%rbp), %rax
    lea -88(%rbp), %rcx
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    pop %rbx
    xor %rbx, %rax
    movb %al, (%rcx)
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp
L464:
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    incq (%rcx)
    jmp L463
L465:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    test %eax, %eax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L478
    jmp L479
L478:
    sub $8, %rsp
    movq $0, -64(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -64(%rbp)
    sub $8, %rsp
    movq $0, -72(%rbp)
    lea L480(%rip), %rax
    push %rax
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    sub $8, %rsp
    movq $0, -64(%rbp)
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -72(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L241
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    push %rax
    push %rcx
    movq -32(%rbp), %rax
    push %rax
    call L17
    pop %rax
    push %rax
    mov $24, %rax
    push %rax
    call L241
    add $16, %rsp
    pop %rcx
    pop %rax
    add $40, %rsp
    jmp L453
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L479
L479:
    sub $8, %rsp
    mov $40, %rax
    push %rax
    call L240
    add $8, %rsp
    push %rax
    push %rax
    push %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    pop %rax
    push %rax
    push %rax
    call L12
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    pop %rax
    pop %rax
    add $24, %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    pop %rax
    push %rax
    push %rax
    call L62
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    pop %rax
    movq %rax, -64(%rbp)
    sub $8, %rsp
    movq $0, -72(%rbp)
    mov -16(%rbp), %rax
    mov -16(%rbp), %rcx
    movq %rcx, -72(%rbp)
    sub $8, %rsp
    movq $0, -80(%rbp)
    mov $1, %rax
    push %rax
    mov -80(%rbp), %rax
    lea -80(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    call L440
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    push %rax
    mov -64(%rbp), %rax
    mov -64(%rbp), %rcx
    lea 0(%rax), %rcx
    lea 0(%rax), %rax
    push %rax
    push %rax
    call L17
    pop %rax
    pop %rax
    push %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    pop %rax
    push %rax
    push %rax
    sub $8, %rsp
    movq $0, -96(%rbp)
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    mov %rax, %rcx
    movq %rcx, -96(%rbp)
    call L13
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    add $8, %rsp
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    mov %rax, %rcx
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    push %rax
    mov -64(%rbp), %rax
    mov -64(%rbp), %rcx
    lea 24(%rax), %rcx
    lea 24(%rax), %rax
    movq (%rax), %rax
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -64(%rbp), %rax
    mov -64(%rbp), %rcx
    lea 32(%rax), %rcx
    lea 32(%rax), %rax
    movq (%rax), %rax
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -8(%rbp), %rax
    mov -8(%rbp), %rcx
    push %rax
    sub $8, %rsp
    mov $40, %rax
    push %rax
    call L240
    add $8, %rsp
    push %rax
    push %rax
    push %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    pop %rax
    push %rax
    push %rax
    call L12
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    pop %rax
    pop %rax
    add $24, %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    pop %rax
    push %rax
    push %rax
    call L62
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    pop %rax
    movq %rax, -80(%rbp)
    mov -64(%rbp), %rax
    mov -64(%rbp), %rcx
    push %rax
    mov -80(%rbp), %rax
    mov -80(%rbp), %rcx
    push %rax
    push %rax
    call L61
    pop %rax
    push %rax
    add $0, %rax
    push %rax
    call L17
    pop %rax
    pop %rax
    pop %rax
    push %rax
    push %rax
    push %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    pop %rax
    push %rax
    push %rax
    call L12
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    pop %rax
    pop %rax
    add $24, %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    pop %rax
    push %rax
    push %rax
    sub $8, %rsp
    movq $0, -112(%rbp)
    mov -88(%rbp), %rax
    lea -88(%rbp), %rcx
    mov %rax, %rcx
    movq %rcx, -112(%rbp)
    call L60
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    add $8, %rsp
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    mov %rax, %rcx
    call L425
    push %rax
    push %rcx
    movq -80(%rbp), %rax
    push %rax
    call L61
    pop %rax
    push %rax
    add $0, %rax
    push %rax
    call L17
    pop %rax
    pop %rax
    push %rax
    mov $40, %rax
    push %rax
    call L241
    add $16, %rsp
    pop %rcx
    pop %rax
    add $8, %rsp
    add $8, %rsp
    sub $8, %rsp
    movq $0, -72(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -72(%rbp)
    sub $8, %rsp
    movq $0, -80(%rbp)
    lea L481(%rip), %rax
    push %rax
    mov -80(%rbp), %rax
    lea -80(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    sub $8, %rsp
    movq $0, -72(%rbp)
    sub $8, %rsp
    movq $0, -80(%rbp)
    sub $8, %rsp
    movq $0, -88(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -88(%rbp)
    sub $8, %rsp
    movq $0, -96(%rbp)
    lea L482(%rip), %rax
    push %rax
    mov -96(%rbp), %rax
    lea -96(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -80(%rbp)
    sub $8, %rsp
    movq $0, -88(%rbp)
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    movzbq %al, %rax
    push %rax
    mov -88(%rbp), %rax
    lea -88(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L312
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -72(%rbp)
    sub $8, %rsp
    movq $0, -80(%rbp)
    lea L396(%rip), %rax
    push %rax
    mov -80(%rbp), %rax
    lea -80(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    sub $8, %rsp
    movq $0, -72(%rbp)
    mov -64(%rbp), %rax
    mov -64(%rbp), %rcx
    movq %rcx, -72(%rbp)
    sub $8, %rsp
    movq $0, -80(%rbp)
    mov $1, %rax
    push %rax
    mov -80(%rbp), %rax
    lea -80(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    call L242
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    push %rax
    push %rcx
    movq -32(%rbp), %rax
    push %rax
    call L17
    pop %rax
    push %rax
    mov $24, %rax
    push %rax
    call L241
    add $16, %rsp
    movq -64(%rbp), %rax
    push %rax
    call L61
    pop %rax
    push %rax
    add $0, %rax
    push %rax
    call L17
    pop %rax
    pop %rax
    push %rax
    mov $40, %rax
    push %rax
    call L241
    add $16, %rsp
    pop %rcx
    pop %rax
    add $48, %rsp
    jmp L453
    push %rax
    push %rcx
    movq -32(%rbp), %rax
    push %rax
    call L17
    pop %rax
    push %rax
    mov $24, %rax
    push %rax
    call L241
    add $16, %rsp
    movq -64(%rbp), %rax
    push %rax
    call L61
    pop %rax
    push %rax
    add $0, %rax
    push %rax
    call L17
    pop %rax
    pop %rax
    push %rax
    mov $40, %rax
    push %rax
    call L241
    add $16, %rsp
    pop %rcx
    pop %rax
    add $48, %rsp
L452:
    jmp L451
L453:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L446
L443:
    sub $8, %rsp
    movq $0, -24(%rbp)
    sub $8, %rsp
    movq $0, -32(%rbp)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -40(%rbp)
    sub $8, %rsp
    movq $0, -48(%rbp)
    lea L483(%rip), %rax
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -32(%rbp)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov -8(%rbp), %rax
    mov -8(%rbp), %rcx
    push %rax
    call L428
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L312
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -24(%rbp)
    sub $8, %rsp
    movq $0, -32(%rbp)
    lea L396(%rip), %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov $0x0, %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
L484:
    mov -8(%rbp), %rax
    mov -8(%rbp), %rcx
    push %rax
    call L428
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    setb %al
    movzx %al, %rax
    cmp $0, %rax
    je L486
    sub $8, %rsp
    movq $0, -32(%rbp)
    sub $8, %rsp
    movq $0, -40(%rbp)
    sub $8, %rsp
    movq $0, -48(%rbp)
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -56(%rbp)
    sub $8, %rsp
    movq $0, -64(%rbp)
    lea L487(%rip), %rax
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -48(%rbp)
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L312
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -40(%rbp)
    sub $8, %rsp
    movq $0, -48(%rbp)
    lea L488(%rip), %rax
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -32(%rbp)
    sub $8, %rsp
    movq $0, -40(%rbp)
    lea L396(%rip), %rax
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    sub $8, %rsp
    movq $0, -32(%rbp)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov -8(%rbp), %rax
    mov -8(%rbp), %rcx
    movq %rcx, -40(%rbp)
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L489
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -32(%rbp)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov $0, %rax
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    call L242
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -32(%rbp)
    sub $8, %rsp
    movq $0, -40(%rbp)
    lea L396(%rip), %rax
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
L485:
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    incq (%rcx)
    jmp L484
L486:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L446
L444:
L490:
    mov $1, %rax
    cmp $0, %rax
    je L492
    mov $0x2, %rax
    push %rax
    mov -16(%rbp), %rax
    mov -16(%rbp), %rcx
    push %rax
    call L23
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    pop %rbx
    cmp %rbx, %rax
    setb %al
    movzx %al, %rax
    cmp $0, %rax
    jne L493
    jmp L494
L493:
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -24(%rbp)
    sub $8, %rsp
    movq $0, -32(%rbp)
    lea L495(%rip), %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L492
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L494
L494:
    mov $0, %rax
    push %rax
    mov errno(%rip), %rax
    lea errno(%rip), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    sub $8, %rsp
    movq $0, -24(%rbp)
    sub $8, %rsp
    mov $24, %rax
    push %rax
    call L240
    add $8, %rsp
    push %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    pop %rax
    push %rax
    push %rax
    call L12
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    add $8, %rsp
    pop %rax
    movq %rax, -32(%rbp)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov -16(%rbp), %rax
    mov -16(%rbp), %rcx
    movq %rcx, -40(%rbp)
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov $1, %rax
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    call L440
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    push %rax
    mov -32(%rbp), %rax
    mov -32(%rbp), %rcx
    push %rax
    push %rax
    call L17
    pop %rax
    pop %rax
    push %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    movq $0, (%rax)
    add $8, %rax
    pop %rax
    push %rax
    push %rax
    sub $8, %rsp
    movq $0, -64(%rbp)
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rax, %rcx
    movq %rcx, -64(%rbp)
    call L13
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    add $8, %rsp
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    mov %rax, %rcx
    call L198
    push %rax
    push %rcx
    movq -32(%rbp), %rax
    push %rax
    call L17
    pop %rax
    push %rax
    mov $24, %rax
    push %rax
    call L241
    add $16, %rsp
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov errno(%rip), %rax
    lea errno(%rip), %rcx
    cmp $0, %rax
    jne L496
    jmp L497
L496:
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -32(%rbp)
    sub $8, %rsp
    movq $0, -40(%rbp)
    lea L498(%rip), %rax
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    jmp L492
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L497
L497:
    sub $8, %rsp
    movq $0, -32(%rbp)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov -8(%rbp), %rax
    mov -8(%rbp), %rcx
    movq %rcx, -40(%rbp)
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L489
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -32(%rbp)
    sub $8, %rsp
    movq $0, -40(%rbp)
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rax, %rcx
    lea 24(%rax), %rcx
    lea 24(%rax), %rax
    movq (%rax), %rax
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rax, %rcx
    lea 32(%rax), %rcx
    lea 32(%rax), %rax
    movq (%rax), %rax
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L278
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -48(%rbp)
    sub $8, %rsp
    movq $0, -56(%rbp)
    sub $8, %rsp
    movq $0, -64(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -64(%rbp)
    sub $8, %rsp
    movq $0, -72(%rbp)
    lea L500(%rip), %rax
    push %rax
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -56(%rbp)
    sub $8, %rsp
    movq $0, -64(%rbp)
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L499
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -48(%rbp)
    sub $8, %rsp
    movq $0, -56(%rbp)
    lea L396(%rip), %rax
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    mov BOOTBOOT_STACK_TOP(%rip), %rsp
    call scheduler
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp
L491:
    jmp L490
L492:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L446
L445:
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -24(%rbp)
    sub $8, %rsp
    movq $0, -32(%rbp)
    lea L501(%rip), %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L446
L446:
    push %rax
    push %rcx
    movq -16(%rbp), %rax
    push %rax
    call L28
    pop %rax
    push %rax
    mov $24, %rax
    push %rax
    call L241
    add $16, %rsp
    pop %rcx
    pop %rax
    add $8, %rsp
L435:
    jmp L434
L436:
    push %rax
    push %rcx
    movq -8(%rbp), %rax
    push %rax
    call L433
    pop %rax
    push %rax
    mov $24, %rax
    push %rax
    call L241
    add $16, %rsp
    pop %rcx
    pop %rax
    add $8, %rsp
    pop %rbp
    ret

L231:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L228
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    sub $8, %rsp
    movq $0, -16(%rbp)
    lea L502(%rip), %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L298
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    sub $8, %rsp
    movq $0, -8(%rbp)
    mov $1, %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    sub $8, %rsp
    movq $0, -16(%rbp)
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    movq %rcx, -40(%rbp)
    call L227
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov $1, %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    pop %rbx
    cmp %ebx, %eax
    sete %al
    movzx %al, %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    sub $8, %rsp
    movq $0, -32(%rbp)
    lea L503(%rip), %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L298
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov PTE_HUGEPG(%rip), %rax
    lea PTE_HUGEPG(%rip), %rcx
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    pop %rbx
    and %rbx, %rax
    test %rax, %rax
    sete %al
    movzx %al, %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    sub $8, %rsp
    movq $0, -32(%rbp)
    lea L504(%rip), %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L298
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L220
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -24(%rbp)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov $0, %rax
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    call L224
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov PTE_PRESENT(%rip), %rax
    lea PTE_PRESENT(%rip), %rcx
    push %rax
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    push %rax
    push %rcx
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rax, %rbx
    pop %rcx
    pop %rax
    push %rax
    lea (%rax, %rbx, 8), %rax
    mov %rax, %rcx
    pop %rax
    movq (%rax, %rbx, 8), %rax
    pop %rbx
    and %rbx, %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -40(%rbp)
    lea L505(%rip), %rax
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L299
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov $0, %rax
    movsxd %eax, %rax
    push %rax
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    push %rax
    push %rcx
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rax, %rbx
    pop %rcx
    pop %rax
    push %rax
    lea (%rax, %rbx, 8), %rax
    mov %rax, %rcx
    pop %rax
    movq (%rax, %rbx, 8), %rax
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp
    pop %rbp
    ret

L232:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    mov $0, %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    sub $8, %rsp
    movq $0, -16(%rbp)
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov 32(%rbp), %rax
    lea 32(%rbp), %rcx
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    movq %rcx, -40(%rbp)
    call L227
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L221
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    mov %rax, %rcx
    movq (%rax), %rax
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov $3, %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    pop %rbx
    cmp %ebx, %eax
    setl %al
    movzx %al, %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    sub $8, %rsp
    movq $0, -32(%rbp)
    lea L506(%rip), %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L298
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov $2, %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    pop %rbx
    cmp %ebx, %eax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L507
    mov $1, %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    pop %rbx
    cmp %ebx, %eax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L508
    mov $0, %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    pop %rbx
    cmp %ebx, %eax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L509
    jmp L510
L507:
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov $0x3fffffff, %rax
    push %rax
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    pop %rbx
    and %rbx, %rax
    push %rax
    mov $18, %rax
    movsxd %eax, %rax
    push %rax
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L220
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    pop %rbx
    push %rcx
    mov %rbx, %rcx
    shl %cl, %rax
    pop %rcx
    pop %rbx
    add %rbx, %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -24(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    pop %rbp
    ret
    jmp L510
L508:
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov $0x001fffff, %rax
    push %rax
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    pop %rbx
    and %rbx, %rax
    push %rax
    mov $9, %rax
    movsxd %eax, %rax
    push %rax
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L220
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    pop %rbx
    push %rcx
    mov %rbx, %rcx
    shl %cl, %rax
    pop %rcx
    pop %rbx
    add %rbx, %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -24(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    pop %rbp
    ret
    jmp L510
L509:
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov $0x00000fff, %rax
    push %rax
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    pop %rbx
    and %rbx, %rax
    push %rax
    mov $0, %rax
    movsxd %eax, %rax
    push %rax
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L220
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    pop %rbx
    push %rcx
    mov %rbx, %rcx
    shl %cl, %rax
    pop %rcx
    pop %rbx
    add %rbx, %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -24(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    pop %rbp
    ret
    jmp L510
L510:
    sub $8, %rsp
    movq $0, -24(%rbp)
    lea L511(%rip), %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L297
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov nullptr(%rip), %rax
    lea nullptr(%rip), %rcx
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -24(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp

L233:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    sub $8, %rsp
    movq $0, -16(%rbp)
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    movq %rcx, -40(%rbp)
    call L232
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -16(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp

L234:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    mov $0, %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
L512:
    mov $512, %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    pop %rbx
    cmp %ebx, %eax
    setl %al
    movzx %al, %rax
    cmp $0, %rax
    je L514
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    push %rax
    push %rcx
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    movsxd %eax, %rax
    mov %rax, %rbx
    pop %rcx
    pop %rax
    push %rax
    lea (%rax, %rbx, 8), %rax
    mov %rax, %rcx
    pop %rax
    movq (%rax, %rbx, 8), %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov PTE_PRESENT(%rip), %rax
    lea PTE_PRESENT(%rip), %rcx
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    pop %rbx
    and %rbx, %rax
    test %rax, %rax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L515
    jmp L516
L515:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    jmp L513
    jmp L516
L516:
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    cmp $0, %rax
    jne L517
    jmp L518
L517:
    sub $8, %rsp
    movq $0, -24(%rbp)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L220
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov $1, %rax
    push %rax
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    pop %rbx
    sub %ebx, %eax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    call L234
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    jmp L518
L518:
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    test %eax, %eax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L519
    jmp L520
L519:
    sub $8, %rsp
    movq $0, -24(%rbp)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L220
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L219
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    jmp L520
L520:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
L513:
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    incl (%rcx)
    jmp L512
L514:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -8(%rbp)
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L219
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    pop %rbp
    ret

L235:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov $3, %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    call L234
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    pop %rbp
    ret

L236:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    mov $0, %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
L521:
    mov $256, %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    pop %rbx
    cmp %ebx, %eax
    setl %al
    movzx %al, %rax
    cmp $0, %rax
    je L523
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    push %rcx
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    movsxd %eax, %rax
    mov %rax, %rbx
    pop %rcx
    pop %rax
    push %rax
    lea (%rax, %rbx, 8), %rax
    mov %rax, %rcx
    pop %rax
    movq (%rax, %rbx, 8), %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov PTE_PRESENT(%rip), %rax
    lea PTE_PRESENT(%rip), %rcx
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    pop %rbx
    and %rbx, %rax
    test %rax, %rax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L524
    jmp L525
L524:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    jmp L522
    jmp L525
L525:
    sub $8, %rsp
    movq $0, -24(%rbp)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L220
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov $2, %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    call L234
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
L522:
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    incl (%rcx)
    jmp L521
L523:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    pop %rbp
    ret

L237:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    mov $0x0, %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
L526:
    mov $512, %rax
    movsxd %eax, %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    setb %al
    movzx %al, %rax
    cmp $0, %rax
    je L528
    mov $3, %rax
    push %rax
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    pop %rbx
    cmp %ebx, %eax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    je L531
    push %rax
    mov $256, %rax
    movsxd %eax, %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    sete %al
    movzx %al, %rax
    mov %rax, %rbx
    pop %rax
    test %eax, %eax
    setne %al
    movzx %al, %rax
    test %ebx, %ebx
    setne %bl
    movzx %bl, %rbx
    and %rbx, %rax
L531:
    cmp $0, %rax
    jne L529
    jmp L530
L529:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L528
    jmp L530
L530:
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    mov $9, %rax
    pop %rbx
    imul %ebx, %eax
    movsxd %eax, %rax
    push %rax
    mov $12, %rax
    movsxd %eax, %rax
    pop %rbx
    add %rbx, %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    pop %rbx
    push %rcx
    mov %rbx, %rcx
    shl %cl, %rax
    pop %rcx
    push %rax
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    pop %rbx
    or %rbx, %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov 40(%rbp), %rax
    lea 40(%rbp), %rcx
    push %rax
    push %rcx
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rax, %rbx
    pop %rcx
    pop %rax
    push %rax
    lea (%rax, %rbx, 8), %rax
    mov %rax, %rcx
    pop %rax
    movq (%rax, %rbx, 8), %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov PTE_PRESENT(%rip), %rax
    lea PTE_PRESENT(%rip), %rcx
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    pop %rbx
    and %rbx, %rax
    test %rax, %rax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L532
    jmp L533
L532:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    jmp L527
    jmp L533
L533:
    sub $8, %rsp
    movq $0, -32(%rbp)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L220
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    cmp $0, %rax
    jne L534
    jmp L535
L534:
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov 32(%rbp), %rax
    lea 32(%rbp), %rcx
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -64(%rbp)
    mov $1, %rax
    push %rax
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    pop %rbx
    sub %ebx, %eax
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    call L237
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $32, %rsp
    jmp L535
L535:
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    test %eax, %eax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L536
    jmp L537
L536:
    sub $8, %rsp
    movq $0, -40(%rbp)
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L221
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -48(%rbp)
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L220
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -56(%rbp)
    call palloc
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -64(%rbp)
    mov 32(%rbp), %rax
    lea 32(%rbp), %rcx
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -72(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -80(%rbp)
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    push %rax
    mov -80(%rbp), %rax
    lea -80(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -88(%rbp)
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    push %rax
    mov -88(%rbp), %rax
    lea -88(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L229
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $32, %rsp
    sub $8, %rsp
    movq $0, -64(%rbp)
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -72(%rbp)
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    push %rax
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -80(%rbp)
    mov PAGE_SIZE(%rip), %rax
    lea PAGE_SIZE(%rip), %rcx
    push %rax
    mov -80(%rbp), %rax
    lea -80(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L176
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp
    jmp L537
L537:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp
L527:
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    incq (%rcx)
    jmp L526
L528:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    pop %rbp
    ret

L238:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov $0x0, %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov $3, %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    call L237
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $32, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    pop %rbp
    ret

L239:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    mov $0, %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
L538:
    mov $512, %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    pop %rbx
    cmp %ebx, %eax
    setl %al
    movzx %al, %rax
    cmp $0, %rax
    je L540
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov 32(%rbp), %rax
    lea 32(%rbp), %rcx
    push %rax
    push %rcx
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    movsxd %eax, %rax
    mov %rax, %rbx
    pop %rcx
    pop %rax
    push %rax
    lea (%rax, %rbx, 8), %rax
    mov %rax, %rcx
    pop %rax
    movq (%rax, %rbx, 8), %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov PTE_PRESENT(%rip), %rax
    lea PTE_PRESENT(%rip), %rcx
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    pop %rbx
    and %rbx, %rax
    test %rax, %rax
    sete %al
    movzx %al, %rax
    cmp $0, %rax
    jne L541
    jmp L542
L541:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    jmp L539
    jmp L542
L542:
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    cmp $0, %rax
    jne L543
    jmp L544
L543:
    sub $8, %rsp
    movq $0, -24(%rbp)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L220
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov $1, %rax
    push %rax
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    pop %rbx
    sub %ebx, %eax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov $1, %rax
    push %rax
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    pop %rbx
    add %ebx, %eax
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    call L239
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp
    jmp L544
L544:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
L539:
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    incl (%rcx)
    jmp L538
L540:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -8(%rbp)
    mov $0, %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
L545:
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    pop %rbx
    cmp %ebx, %eax
    setl %al
    movzx %al, %rax
    cmp $0, %rax
    je L547
    sub $8, %rsp
    movq $0, -16(%rbp)
    lea L548(%rip), %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L204
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
L546:
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    incl (%rcx)
    jmp L545
L547:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -8(%rbp)
    mov 32(%rbp), %rax
    lea 32(%rbp), %rcx
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L549
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    pop %rbp
    ret

L240:
    push %rbp
    mov %rsp, %rbp
    mov PAGE_SIZE(%rip), %rax
    lea PAGE_SIZE(%rip), %rcx
    push %rax
    mov PAGE_SIZE(%rip), %rax
    lea PAGE_SIZE(%rip), %rcx
    push %rax
    mov $1, %rax
    movsxd %eax, %rax
    push %rax
    mov PAGE_SIZE(%rip), %rax
    lea PAGE_SIZE(%rip), %rcx
    push %rax
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    pop %rbx
    add %rbx, %rax
    pop %rbx
    sub %rbx, %rax
    pop %rbx
    xor %rdx, %rdx
    div %rbx
    pop %rbx
    mul %rbx
    push %rax
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    mov MEM_USED(%rip), %rax
    lea MEM_USED(%rip), %rcx
    pop %rbx
    add %rbx, %rax
    movq %rax, (%rcx)
    sub $8, %rsp
    movq $0, -8(%rbp)
    mov kheap_brk(%rip), %rax
    lea kheap_brk(%rip), %rcx
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -16(%rbp)
    call pt_get_current
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov $0, %rax
    movsxd %eax, %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
L550:
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    setb %al
    movzx %al, %rax
    cmp $0, %rax
    je L552
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov kheap_brk(%rip), %rax
    lea kheap_brk(%rip), %rcx
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    pop %rbx
    add %rbx, %rax
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -48(%rbp)
    call palloc
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov PTE_WRITEABLE(%rip), %rax
    lea PTE_WRITEABLE(%rip), %rcx
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L229
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $32, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
L551:
    mov PAGE_SIZE(%rip), %rax
    lea PAGE_SIZE(%rip), %rcx
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    pop %rbx
    add %rbx, %rax
    movq %rax, (%rcx)
    jmp L550
L552:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    mov kheap_brk(%rip), %rax
    lea kheap_brk(%rip), %rcx
    pop %rbx
    add %rbx, %rax
    movq %rax, (%rcx)
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov -24(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp

L241:
    push %rbp
    mov %rsp, %rbp
    mov PAGE_SIZE(%rip), %rax
    lea PAGE_SIZE(%rip), %rcx
    push %rax
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    pop %rbx
    xor %rdx, %rdx
    div %rbx
    mov %rdx, %rax
    cmp $0, %rax
    jne L553
    jmp L554
L553:
    sub $8, %rsp
    movq $0, -8(%rbp)
    lea L555(%rip), %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L297
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L554
L554:
    mov PAGE_SIZE(%rip), %rax
    lea PAGE_SIZE(%rip), %rcx
    push %rax
    mov PAGE_SIZE(%rip), %rax
    lea PAGE_SIZE(%rip), %rcx
    push %rax
    mov $1, %rax
    movsxd %eax, %rax
    push %rax
    mov PAGE_SIZE(%rip), %rax
    lea PAGE_SIZE(%rip), %rcx
    push %rax
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    pop %rbx
    add %rbx, %rax
    pop %rbx
    sub %rbx, %rax
    pop %rbx
    xor %rdx, %rdx
    div %rbx
    pop %rbx
    mul %rbx
    push %rax
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov MEM_USED(%rip), %rax
    lea MEM_USED(%rip), %rcx
    push %rax
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    seta %al
    movzx %al, %rax
    cmp $0, %rax
    jne L556
    jmp L557
L556:
    sub $8, %rsp
    movq $0, -8(%rbp)
    lea L558(%rip), %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L297
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L557
L557:
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    mov MEM_USED(%rip), %rax
    lea MEM_USED(%rip), %rcx
    pop %rbx
    sub %rbx, %rax
    movq %rax, (%rcx)
    sub $8, %rsp
    movq $0, -8(%rbp)
    call pt_get_current
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov $0, %rax
    movsxd %eax, %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
L559:
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    setb %al
    movzx %al, %rax
    cmp $0, %rax
    je L561
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    pop %rbx
    add %rbx, %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov $0, %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    sub $8, %rsp
    movq $0, -40(%rbp)
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -64(%rbp)
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    movq %rcx, -64(%rbp)
    call L227
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $24, %rsp
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov $0, %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    pop %rbx
    cmp %ebx, %eax
    sete %al
    movzx %al, %rax
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    sub $8, %rsp
    movq $0, -56(%rbp)
    lea L562(%rip), %rax
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L298
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    sub $8, %rsp
    movq $0, -48(%rbp)
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L220
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -64(%rbp)
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    pop %rbx
    add %rbx, %rax
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L231
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L219
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $32, %rsp
L560:
    mov PAGE_SIZE(%rip), %rax
    lea PAGE_SIZE(%rip), %rcx
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    pop %rbx
    add %rbx, %rax
    movq %rax, (%rcx)
    jmp L559
L561:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov $0, %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    mov -16(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp

L266:
    push %rbp
    mov %rsp, %rbp
    mov $0xffff, %rax
    push %rax
    mov 48(%rbp), %rax
    lea 48(%rbp), %rcx
    pop %rbx
    and %rbx, %rax
    movzwq %ax, %rax
    push %rax
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    push %rcx
    mov 56(%rbp), %rax
    lea 56(%rbp), %rcx
    movsxd %eax, %rax
    mov %rax, %rbx
    pop %rcx
    pop %rax
    push %rax
    push %rax
    mov $16, %rax
    imul %rax, %rbx
    pop %rax
    add %rbx, %rax
    mov %rax, %rcx
    pop %rax
    mov %rcx, %rax
    lea 0(%rax), %rcx
    lea 0(%rax), %rax
    movzwq (%rax), %rax
    mov %rcx, %rbx
    pop %rax
    movw %ax, (%rbx)
    mov 40(%rbp), %rax
    lea 40(%rbp), %rcx
    push %rax
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    push %rcx
    mov 56(%rbp), %rax
    lea 56(%rbp), %rcx
    movsxd %eax, %rax
    mov %rax, %rbx
    pop %rcx
    pop %rax
    push %rax
    push %rax
    mov $16, %rax
    imul %rax, %rbx
    pop %rax
    add %rbx, %rax
    mov %rax, %rcx
    pop %rax
    mov %rcx, %rax
    lea 2(%rax), %rcx
    lea 2(%rax), %rax
    movzwq (%rax), %rax
    mov %rcx, %rbx
    pop %rax
    movw %ax, (%rbx)
    mov $0x7, %rax
    movzbq %al, %rax
    push %rax
    mov 32(%rbp), %rax
    lea 32(%rbp), %rcx
    pop %rbx
    and %rbx, %rax
    push %rax
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    push %rcx
    mov 56(%rbp), %rax
    lea 56(%rbp), %rcx
    movsxd %eax, %rax
    mov %rax, %rbx
    pop %rcx
    pop %rax
    push %rax
    push %rax
    mov $16, %rax
    imul %rax, %rbx
    pop %rax
    add %rbx, %rax
    mov %rax, %rcx
    pop %rax
    mov %rcx, %rax
    lea 4(%rax), %rcx
    lea 4(%rax), %rax
    movzbq (%rax), %rax
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    push %rax
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    push %rcx
    mov 56(%rbp), %rax
    lea 56(%rbp), %rcx
    movsxd %eax, %rax
    mov %rax, %rbx
    pop %rcx
    pop %rax
    push %rax
    push %rax
    mov $16, %rax
    imul %rax, %rbx
    pop %rax
    add %rbx, %rax
    mov %rax, %rcx
    pop %rax
    mov %rcx, %rax
    lea 5(%rax), %rcx
    lea 5(%rax), %rax
    movzbq (%rax), %rax
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    mov $0xffff, %rax
    push %rax
    mov $16, %rax
    movsxd %eax, %rax
    push %rax
    mov 48(%rbp), %rax
    lea 48(%rbp), %rcx
    pop %rbx
    push %rcx
    mov %rbx, %rcx
    shr %cl, %rax
    pop %rcx
    pop %rbx
    and %rbx, %rax
    movzwq %ax, %rax
    push %rax
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    push %rcx
    mov 56(%rbp), %rax
    lea 56(%rbp), %rcx
    movsxd %eax, %rax
    mov %rax, %rbx
    pop %rcx
    pop %rax
    push %rax
    push %rax
    mov $16, %rax
    imul %rax, %rbx
    pop %rax
    add %rbx, %rax
    mov %rax, %rcx
    pop %rax
    mov %rcx, %rax
    lea 6(%rax), %rcx
    lea 6(%rax), %rax
    movzwq (%rax), %rax
    mov %rcx, %rbx
    pop %rax
    movw %ax, (%rbx)
    mov $0xffffffff, %rax
    push %rax
    mov $32, %rax
    movsxd %eax, %rax
    push %rax
    mov 48(%rbp), %rax
    lea 48(%rbp), %rcx
    pop %rbx
    push %rcx
    mov %rbx, %rcx
    shr %cl, %rax
    pop %rcx
    pop %rbx
    and %rbx, %rax
    mov %eax, %eax
    push %rax
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    push %rcx
    mov 56(%rbp), %rax
    lea 56(%rbp), %rcx
    movsxd %eax, %rax
    mov %rax, %rbx
    pop %rcx
    pop %rax
    push %rax
    push %rax
    mov $16, %rax
    imul %rax, %rbx
    pop %rax
    add %rbx, %rax
    mov %rax, %rcx
    pop %rax
    mov %rcx, %rax
    lea 8(%rax), %rcx
    lea 8(%rax), %rax
    movl (%rax), %eax
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    mov $0, %rax
    push %rax
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    push %rax
    push %rcx
    mov 56(%rbp), %rax
    lea 56(%rbp), %rcx
    movsxd %eax, %rax
    mov %rax, %rbx
    pop %rcx
    pop %rax
    push %rax
    push %rax
    mov $16, %rax
    imul %rax, %rbx
    pop %rax
    add %rbx, %rax
    mov %rax, %rcx
    pop %rax
    mov %rcx, %rax
    lea 12(%rax), %rcx
    lea 12(%rax), %rax
    movl (%rax), %eax
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    pop %rbp
    ret

L242:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    sub $8, %rsp
    movq $0, -16(%rbp)
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -24(%rbp)
    sub $8, %rsp
    movq $0, -32(%rbp)
    lea L563(%rip), %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -16(%rbp)
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    mov %rax, %rcx
    lea 0(%rax), %rcx
    lea 0(%rax), %rax
    movq %rcx, -24(%rbp)
    call L315
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -8(%rbp)
    sub $8, %rsp
    movq $0, -16(%rbp)
    lea L396(%rip), %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    sub $8, %rsp
    movq $0, -8(%rbp)
    sub $8, %rsp
    movq $0, -16(%rbp)
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -24(%rbp)
    sub $8, %rsp
    movq $0, -32(%rbp)
    lea L564(%rip), %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -16(%rbp)
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    mov %rax, %rcx
    lea 32(%rax), %rcx
    lea 32(%rax), %rax
    movq (%rax), %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L312
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -8(%rbp)
    sub $8, %rsp
    movq $0, -16(%rbp)
    lea L396(%rip), %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    mov 16(%rbp), %rax
    lea 16(%rbp), %rcx
    cmp $0, %rax
    jne L565
    jmp L566
L565:
    sub $8, %rsp
    movq $0, -8(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -8(%rbp)
    sub $8, %rsp
    movq $0, -16(%rbp)
    lea L567(%rip), %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    sub $8, %rsp
    movq $0, -8(%rbp)
    mov $0, %rax
    movsxd %eax, %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
L568:
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    mov %rax, %rcx
    lea 32(%rax), %rcx
    lea 32(%rax), %rax
    movq (%rax), %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    setb %al
    movzx %al, %rax
    cmp $0, %rax
    je L570
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -16(%rbp)
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov 24(%rbp), %rax
    lea 24(%rbp), %rcx
    mov %rax, %rcx
    lea 24(%rax), %rcx
    lea 24(%rax), %rax
    movq (%rax), %rax
    push %rax
    push %rcx
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rax, %rbx
    pop %rcx
    pop %rax
    push %rax
    lea (%rax, %rbx, 1), %rax
    mov %rax, %rcx
    pop %rax
    movzbl (%rax, %rbx, 1), %eax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movb %al, (%rbx)
    call L309
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
L569:
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    incq (%rcx)
    jmp L568
L570:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    sub $8, %rsp
    movq $0, -8(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -8(%rbp)
    sub $8, %rsp
    movq $0, -16(%rbp)
    lea L396(%rip), %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L566
L566:
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    pop %rbp
    ret

L243:
    push %rbp
    mov %rsp, %rbp
    sub $8, %rsp
    movq $0, -8(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -8(%rbp)
    sub $8, %rsp
    movq $0, -16(%rbp)
    lea L571(%rip), %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    mov $64, %rax
    push %rax
    mov 32(%rbp), %rax
    lea 32(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    setb %al
    movzx %al, %rax
    cmp $0, %rax
    jne L572
    jmp L573
L572:
    sub $8, %rsp
    movq $0, -8(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -8(%rbp)
    sub $8, %rsp
    movq $0, -16(%rbp)
    lea L574(%rip), %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    sub $8, %rsp
    movq $0, -8(%rbp)
    mov $1, %rax
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    mov -8(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L573
L573:
    sub $8, %rsp
    movq $0, -8(%rbp)
    mov 40(%rbp), %rax
    lea 40(%rbp), %rcx
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov ELFMAG0(%rip), %rax
    lea ELFMAG0(%rip), %rcx
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rax, %rcx
    lea 0(%rax), %rcx
    lea 0(%rax), %rax
    push %rax
    push %rcx
    mov $0, %rax
    movsxd %eax, %rax
    mov %rax, %rbx
    pop %rcx
    pop %rax
    push %rax
    lea (%rax, %rbx, 1), %rax
    mov %rax, %rcx
    pop %rax
    movzbl (%rax, %rbx, 1), %eax
    pop %rbx
    cmp %bl, %al
    setne %al
    movzx %al, %rax
    cmp $0, %rax
    jne L579
    push %rax
    mov ELFMAG1(%rip), %rax
    lea ELFMAG1(%rip), %rcx
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rax, %rcx
    lea 0(%rax), %rcx
    lea 0(%rax), %rax
    push %rax
    push %rcx
    mov $1, %rax
    movsxd %eax, %rax
    mov %rax, %rbx
    pop %rcx
    pop %rax
    push %rax
    lea (%rax, %rbx, 1), %rax
    mov %rax, %rcx
    pop %rax
    movzbl (%rax, %rbx, 1), %eax
    pop %rbx
    cmp %bl, %al
    setne %al
    movzx %al, %rax
    mov %rax, %rbx
    pop %rax
    test %eax, %eax
    setne %al
    movzx %al, %rax
    test %ebx, %ebx
    setne %bl
    movzx %bl, %rbx
    or %rbx, %rax
L579:
    cmp $0, %rax
    jne L578
    push %rax
    mov ELFMAG2(%rip), %rax
    lea ELFMAG2(%rip), %rcx
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rax, %rcx
    lea 0(%rax), %rcx
    lea 0(%rax), %rax
    push %rax
    push %rcx
    mov $2, %rax
    movsxd %eax, %rax
    mov %rax, %rbx
    pop %rcx
    pop %rax
    push %rax
    lea (%rax, %rbx, 1), %rax
    mov %rax, %rcx
    pop %rax
    movzbl (%rax, %rbx, 1), %eax
    pop %rbx
    cmp %bl, %al
    setne %al
    movzx %al, %rax
    mov %rax, %rbx
    pop %rax
    test %eax, %eax
    setne %al
    movzx %al, %rax
    test %ebx, %ebx
    setne %bl
    movzx %bl, %rbx
    or %rbx, %rax
L578:
    cmp $0, %rax
    jne L577
    push %rax
    mov ELFMAG3(%rip), %rax
    lea ELFMAG3(%rip), %rcx
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rax, %rcx
    lea 0(%rax), %rcx
    lea 0(%rax), %rax
    push %rax
    push %rcx
    mov $3, %rax
    movsxd %eax, %rax
    mov %rax, %rbx
    pop %rcx
    pop %rax
    push %rax
    lea (%rax, %rbx, 1), %rax
    mov %rax, %rcx
    pop %rax
    movzbl (%rax, %rbx, 1), %eax
    pop %rbx
    cmp %bl, %al
    setne %al
    movzx %al, %rax
    mov %rax, %rbx
    pop %rax
    test %eax, %eax
    setne %al
    movzx %al, %rax
    test %ebx, %ebx
    setne %bl
    movzx %bl, %rbx
    or %rbx, %rax
L577:
    cmp $0, %rax
    jne L575
    jmp L576
L575:
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -16(%rbp)
    sub $8, %rsp
    movq $0, -24(%rbp)
    lea L580(%rip), %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov $1, %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    mov -16(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $8, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L576
L576:
    sub $8, %rsp
    movq $0, -16(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rax, %rcx
    lea 56(%rax), %rcx
    lea 56(%rax), %rax
    movzwq (%rax), %rax
    movzwq %ax, %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    mov 32(%rbp), %rax
    lea 32(%rbp), %rcx
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rax, %rcx
    lea 54(%rax), %rcx
    lea 54(%rax), %rax
    movzwq (%rax), %rax
    movzwq %ax, %rax
    pop %rbx
    mul %rbx
    push %rax
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rax, %rcx
    lea 32(%rax), %rcx
    lea 32(%rax), %rax
    movq (%rax), %rax
    pop %rbx
    add %rbx, %rax
    pop %rbx
    cmp %rbx, %rax
    seta %al
    movzx %al, %rax
    cmp $0, %rax
    jne L581
    jmp L582
L581:
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -24(%rbp)
    sub $8, %rsp
    movq $0, -32(%rbp)
    lea L583(%rip), %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov $1, %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    mov -24(%rbp), %rax
    add $8, %rsp
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    pop %rbp
    ret
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $0, %rsp
    jmp L582
L582:
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov $0xffff, %rax
    push %rax
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    setne %al
    movzx %al, %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movl %eax, (%rbx)
    sub $8, %rsp
    movq $0, -32(%rbp)
    lea L584(%rip), %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L298
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    sub $8, %rsp
    movq $0, -24(%rbp)
    sub $8, %rsp
    movq $0, -32(%rbp)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -40(%rbp)
    sub $8, %rsp
    movq $0, -48(%rbp)
    lea L585(%rip), %rax
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -32(%rbp)
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rax, %rcx
    lea 56(%rax), %rcx
    lea 56(%rax), %rax
    movzwq (%rax), %rax
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movw %ax, (%rbx)
    call L314
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -24(%rbp)
    sub $8, %rsp
    movq $0, -32(%rbp)
    lea L396(%rip), %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    sub $8, %rsp
    movq $0, -24(%rbp)
    mov 40(%rbp), %rax
    lea 40(%rbp), %rcx
    push %rax
    push %rcx
    mov -8(%rbp), %rax
    lea -8(%rbp), %rcx
    mov %rax, %rcx
    lea 32(%rax), %rcx
    lea 32(%rax), %rax
    movq (%rax), %rax
    mov %rax, %rbx
    pop %rcx
    pop %rax
    push %rax
    lea (%rax, %rbx, 1), %rax
    mov %rax, %rcx
    pop %rax
    movzbl (%rax, %rbx, 1), %eax
    mov %rcx, %rax
    push %rax
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -32(%rbp)
    mov $0x0, %rax
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
L586:
    mov -16(%rbp), %rax
    lea -16(%rbp), %rcx
    push %rax
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    pop %rbx
    cmp %rbx, %rax
    setb %al
    movzx %al, %rax
    cmp $0, %rax
    je L588
    sub $8, %rsp
    movq $0, -40(%rbp)
    mov -24(%rbp), %rax
    lea -24(%rbp), %rcx
    push %rax
    push %rcx
    mov -32(%rbp), %rax
    lea -32(%rbp), %rcx
    mov %rax, %rbx
    pop %rcx
    pop %rax
    push %rax
    push %rax
    mov $56, %rax
    imul %rax, %rbx
    pop %rax
    add %rbx, %rax
    mov %rax, %rcx
    pop %rax
    mov %rcx, %rax
    push %rax
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -48(%rbp)
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rax, %rcx
    lea 4(%rax), %rcx
    lea 4(%rax), %rax
    movl (%rax), %eax
    mov %eax, %eax
    push %rax
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -56(%rbp)
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rax, %rcx
    lea 8(%rax), %rcx
    lea 8(%rax), %rax
    movq (%rax), %rax
    push %rax
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -64(%rbp)
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rax, %rcx
    lea 16(%rax), %rcx
    lea 16(%rax), %rax
    movq (%rax), %rax
    push %rax
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -72(%rbp)
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rax, %rcx
    lea 32(%rax), %rcx
    lea 32(%rax), %rax
    movq (%rax), %rax
    push %rax
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -80(%rbp)
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rax, %rcx
    lea 40(%rax), %rcx
    lea 40(%rax), %rax
    movq (%rax), %rax
    push %rax
    mov -80(%rbp), %rax
    lea -80(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -88(%rbp)
    mov -40(%rbp), %rax
    lea -40(%rbp), %rcx
    mov %rax, %rcx
    lea 48(%rax), %rcx
    lea 48(%rax), %rax
    movq (%rax), %rax
    push %rax
    mov -88(%rbp), %rax
    lea -88(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    sub $8, %rsp
    movq $0, -96(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -96(%rbp)
    sub $8, %rsp
    movq $0, -104(%rbp)
    lea L589(%rip), %rax
    push %rax
    mov -104(%rbp), %rax
    lea -104(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    sub $8, %rsp
    movq $0, -96(%rbp)
    sub $8, %rsp
    movq $0, -104(%rbp)
    sub $8, %rsp
    movq $0, -112(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -112(%rbp)
    sub $8, %rsp
    movq $0, -120(%rbp)
    lea L590(%rip), %rax
    push %rax
    mov -120(%rbp), %rax
    lea -120(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -104(%rbp)
    sub $8, %rsp
    movq $0, -112(%rbp)
    mov -48(%rbp), %rax
    lea -48(%rbp), %rcx
    push %rax
    mov -112(%rbp), %rax
    lea -112(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L312
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -96(%rbp)
    sub $8, %rsp
    movq $0, -104(%rbp)
    lea L396(%rip), %rax
    push %rax
    mov -104(%rbp), %rax
    lea -104(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    sub $8, %rsp
    movq $0, -96(%rbp)
    sub $8, %rsp
    movq $0, -104(%rbp)
    sub $8, %rsp
    movq $0, -112(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -112(%rbp)
    sub $8, %rsp
    movq $0, -120(%rbp)
    lea L592(%rip), %rax
    push %rax
    mov -120(%rbp), %rax
    lea -120(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -104(%rbp)
    sub $8, %rsp
    movq $0, -112(%rbp)
    mov -56(%rbp), %rax
    lea -56(%rbp), %rcx
    push %rax
    mov -112(%rbp), %rax
    lea -112(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L591
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -96(%rbp)
    sub $8, %rsp
    movq $0, -104(%rbp)
    lea L396(%rip), %rax
    push %rax
    mov -104(%rbp), %rax
    lea -104(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    sub $8, %rsp
    movq $0, -96(%rbp)
    sub $8, %rsp
    movq $0, -104(%rbp)
    sub $8, %rsp
    movq $0, -112(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -112(%rbp)
    sub $8, %rsp
    movq $0, -120(%rbp)
    lea L593(%rip), %rax
    push %rax
    mov -120(%rbp), %rax
    lea -120(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -104(%rbp)
    sub $8, %rsp
    movq $0, -112(%rbp)
    mov -64(%rbp), %rax
    lea -64(%rbp), %rcx
    push %rax
    mov -112(%rbp), %rax
    lea -112(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L591
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -96(%rbp)
    sub $8, %rsp
    movq $0, -104(%rbp)
    lea L396(%rip), %rax
    push %rax
    mov -104(%rbp), %rax
    lea -104(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    sub $8, %rsp
    movq $0, -96(%rbp)
    sub $8, %rsp
    movq $0, -104(%rbp)
    sub $8, %rsp
    movq $0, -112(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -112(%rbp)
    sub $8, %rsp
    movq $0, -120(%rbp)
    lea L594(%rip), %rax
    push %rax
    mov -120(%rbp), %rax
    lea -120(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -104(%rbp)
    sub $8, %rsp
    movq $0, -112(%rbp)
    mov -72(%rbp), %rax
    lea -72(%rbp), %rcx
    push %rax
    mov -112(%rbp), %rax
    lea -112(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L312
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -96(%rbp)
    sub $8, %rsp
    movq $0, -104(%rbp)
    lea L396(%rip), %rax
    push %rax
    mov -104(%rbp), %rax
    lea -104(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    sub $8, %rsp
    movq $0, -96(%rbp)
    sub $8, %rsp
    movq $0, -104(%rbp)
    sub $8, %rsp
    movq $0, -112(%rbp)
    mov sout(%rip), %rax
    mov sout(%rip), %rcx
    movq %rcx, -112(%rbp)
    sub $8, %rsp
    movq $0, -120(%rbp)
    lea L595(%rip), %rax
    push %rax
    mov -120(%rbp), %rax
    lea -120(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -104(%rbp)
    sub $8, %rsp
    movq $0, -112(%rbp)
    mov -80(%rbp), %rax
    lea -80(%rbp), %rcx
    push %rax
    mov -112(%rbp), %rax
    lea -112(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L312
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    movq %rcx, -96(%rbp)
    sub $8, %rsp
    movq $0, -104(%rbp)
    lea L396(%rip), %rax
    push %rax
    mov -104(%rbp), %rax
    lea -104(%rbp), %rcx
    mov %rcx, %rbx
    pop %rax
    movq %rax, (%rbx)
    call L308
    push %rax
    push %rcx
    pop %rcx
    pop %rax
    add $16, %rsp
    mov %rax, %rcx
    sub $8, %rsp
    movq $0, -96(%rbp)
    sub $8, %rsp
    movq $0, -104(%rbp)
    sub $8, %rsp
