#include <jstring>;
#include <string>;
#include <iostream>;
#include <time>;
#include <wait>;

i32 main() {                                                                                          

    cout << "\n";
    cout << "        88                           88          ,ad8888ba,     ad88888ba " << "\n";     
    cout << "        88                           88         d8``    ``8b   d8`     `8b" << "\n";     
    cout << "        88                           88        d8`        `8b  Y8,        " << "\n";     
    cout << "        88  ,adPPYYba,  8b,dPPYba,   88   ,d8  88          88  `Y8aaaaa,  " << "\n";     
    cout << "        88  ``     `Y8  88P`   ``8a  88 ,a8`   88          88    ``````8b," << "\n";     
    cout << "        88  ,adPPPPP88  88       88  8888[     Y8,        ,8P          `8b" << "\n";     
    cout << "88,   ,d88  88,    ,88  88       88  88``Yba,   Y8a.    .a8P   Y8a     a8P" << "\n";     
    cout << " `Y8888P`   ``8bbdP`Y8  88       88  88   `Y8a   ``Y8888Y``     `Y88888P` " << "\n";
    cout << "\n";

    cout << "Current time UTC (?) : " << strftime() << "\n";
    cout << "\n";

    while(1) {
        cout << "jankshell> ";
        vector<string> cmd = cin.next_line().split(' ');
        if(cmd[0] == "quit") {
            break;
        }
        else if(cmd[0] == "time") {
            cout << "Current epoch time : " << get_sys_time_sec() << "\n";
            cout << "Current time UTC (?) : " << strftime() << "\n";
        }
        else if(cmd[0] == "yield") {
            cout << "BEFORE YIELD\n";
            sys_sched_yield();
            cout << "AFTER YIELD (YAY)\n";
        }
        else if(cmd[0] == "pagefault") {
            u8* ptr = $u8* 0x0;
            u8 val = ptr[0];
        }
        else if(cmd[0] == "fork") {
            pid_t pid = sys_fork();
            if(pid == $pid_t 0) {
                cout << "child : " << pid << "\n";
                return 0;
            }
            else {
                cout << "parent : " << pid << "\n";
                while(waitpid(pid, $i32* nullptr, WNOHANG) == $pid_t 0) {
                    //continue
                }
            }   
            cout << "done fork\n";
        }
        else if(cmd[0] == "exec") {
            pid_t pid = sys_fork();
            if(pid == $pid_t 0) {   //child
                sys_execve("basic", $u8** nullptr, $u8** nullptr);
                cout << "exec failed\n";
                return 1;
            }
            else {  //parent
                return 0;
                while(waitpid(pid, $i32* nullptr, WNOHANG) == $pid_t 0) {
                    //continue
                }
            }
            cout << "done exec\n";
        }
        else {
            cout << "unknown command\n";
        }
    }

    return 0;
}