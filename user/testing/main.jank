#include <iostream>;
#include <dirent>;

//automated test runner

//each test should have the filestructure:
//<testname>
//  src
//    main.jank
//    <other files>
//  in.txt
//  out.txt
//  args.txt

//when a test is ran, all files under src are copied into ./sandbox, all .jank files are compiled 
// and ./main is ran with arguments in args.txt
//a test passes if all of the .jank files compile successfully, main returns with status 0, and
// the output exactly matches out.txt

//since we don't have a jank compiler that can run in the OS, the copying and compiling step will take
// place in the hosting OS. 

i32 main(u64 argc, u8** argv) {
    if(argc == 0x1) {
        cout << "Usage : \n";
        cout << "main run-tests\n";
        return 1;
    }

    string mode = new string(argv[1]);
    if(mode == "run-tests") {
        //gather all tests
        vector<string> tests;
        {
            dirstream* dir = opendir(".");
            if($void* dir == nullptr) {
                cout << "failed opening dirstream\n";
                return 1;
            }

            while(!dir->eof()) {
                dirent* dent = readdir(dir);
                if($void* dent == nullptr) {
                    break;
                }
                tests.push_back(new string($u8* @(dent->d_name)));
            }
            if(dir->bad()) {
                cout << "failed gathering tests\n";
                return 1;
            }

            closedir(dir);
        }

        cout << "TESTS : \n";
        for(u64 i = 0x0; i < tests.size(); i++) cout << tests[i] << "\n";
    }
    else if(mode == "gen-test") {
        //TODO
    }
    else {
        cout << "unknown mode : \"" << mode << "\"\n";
        return 1;
    }

    return 0;
}