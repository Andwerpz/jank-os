#include <jstring>;
#include <string>;
#include <iostream>;
#include <time>;
#include <wait>;
#include <assert>;
#include <exec>;

[__GLOBAL_FIRST__] u64 CWD_MAXLEN = $u64 4096;
string getcwd() {
    u8* buf = $u8* malloc(CWD_MAXLEN);
    if(sys_getcwd(buf, CWD_MAXLEN) == 0x0) {
        assert(0, "failed to get cwd");
    }
    string res = new string(buf);
    free($void* buf, CWD_MAXLEN);
    return res;
}

i32 main() {                                                                                          

    cout << "\n";
    cout << "        88                           88          ,ad8888ba,     ad88888ba " << "\n";     
    cout << "        88                           88         d8``    ``8b   d8`     `8b" << "\n";     
    cout << "        88                           88        d8`        `8b  Y8,        " << "\n";     
    cout << "        88  ,adPPYYba,  8b,dPPYba,   88   ,d8  88          88  `Y8aaaaa,  " << "\n";     
    cout << "        88  ``     `Y8  88P`   ``8a  88 ,a8`   88          88    ``````8b," << "\n";     
    cout << "        88  ,adPPPPP88  88       88  8888[     Y8,        ,8P          `8b" << "\n";     
    cout << "88,   ,d88  88,    ,88  88       88  88``Yba,   Y8a.    .a8P   Y8a     a8P" << "\n";     
    cout << " `Y8888P`   ``8bbdP`Y8  88       88  88   `Y8a   ``Y8888Y``     `Y88888P` " << "\n";
    cout << "\n";

    cout << "Current time UTC (?) : " << strftime() << "\n";
    cout << "\n";

    while(1) {
        cout << getcwd() << "> ";
        vector<string> cmd = cin.next_line().split(' ');
        if(cmd.size() == 0x0) continue;

        if(cmd[0] == "quit") {
            break;
        }
        else if(cmd[0] == "cd") {
            if(cmd.size() != 0x2) {
                cout << "Usage : cd <path>\n";
            }
            else {
                if(sys_chdir(cmd[1].jstr())) {
                    cout << "cd failed\n";
                }
            }
        }
        else {
            //interpret first token as filepath
            u8* path = cmd[0].jstr();
            u8** argv = $u8** malloc(sizeof(u8*) * (cmd.size() + 0x1));
            for(u64 i = 0x0; i < cmd.size(); i++) {
                argv[i] = cmd[i].jstr();
            }
            argv[cmd.size()] = $u8* nullptr;

            //try to fork + exec 
            pid_t pid = sys_fork();
            if(pid == $pid_t 0) {   //child
                execvp(path, argv);
                cout << "exec failed\n";
                return 1;
            }
            else {  //parent
                while(waitpid(pid, $i32* nullptr, WNOHANG) == $pid_t 0) {
                    //continue
                }
            }

            //free argv
            free($void* argv, sizeof(u8*) * (cmd.size() + 0x1));
        }
    }

    return 0;
}