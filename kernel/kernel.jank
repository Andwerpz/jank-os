
[0] u32* FB_ADDR = $u32* 0xfffffffffc000000;

[0] u64 FB_WIDTH = $u64 800;
[0] u64 FB_HEIGHT = $u64 600;

struct psf_header {
    u32 magic;
    u32 version;
    u32 headersize;
    u32 flags;
    u32 numglyph;
    u32 bytesperglyph;
    u32 height;
    u32 width;
    u8 glyphs;  //glyph starting byte
}
[0] extern u8 _binary_font_psf_start;

void draw_pixel(u64 x, u64 y, u32 color) {
    FB_ADDR[FB_WIDTH * y + x] = color;
}

void draw_pixel(i32 x, i32 y, u32 color) {
    draw_pixel($u64 x, $u64 y, color);
}

[0] u32 COLOR_WHITE = $u32 0x00ffffff;
[0] u32 COLOR_BLACK = $u32 0x00000000;
[0] u32 COLOR_GRAY = $u32 0x00aaaaaa;

//top left corner positioned at (x, y)
//the bits within each byte are big endian, but the bytes themselves are little endian. 
void draw_char(i32 x, i32 y, u8 c) {
    psf_header* font = $psf_header* @_binary_font_psf_start;
    u64 bpl = ($u64 font->width + $u64 7) / $u64 8;
    u8* glyph = $u8* ($u64 font + $u64 font->headersize + $u64 font->bytesperglyph * $u64 c);
    for(i32 j = 0; j < $i32 font->height; j++){
        u64 line = ($u64* @(glyph[bpl * $u64 j]))[0];
        for(i32 i = 0; i < $i32 font->width; i++){
            if(line & ($u64 1 << ($u64 font->width - $u64 1 - $u64 i))) {
                draw_pixel(x + i, y + j, COLOR_WHITE);
            }
            else {
                draw_pixel(x + i, y + j, COLOR_BLACK);
            }
        }
    }
}

void draw_string(i32 x, i32 y, u8* str) {
    psf_header* font = $psf_header* @_binary_font_psf_start;
    while(*str) {
        draw_char(x, y, *str);
        x += $i32 font->width;
        str = $u8* ($u64 str + $u64 1);
    }
}

i32 main() {

    for(i32 i = 0; i < 100; i++){
        for(i32 j = 0; j < 100; j++){
            draw_pixel(i + 200, j + 200, COLOR_WHITE);    //0x00FFFFFF
        }
    }

    draw_string(0, 0, "hello 0123456789!@#$%^&*()[]{};:");

    while(1) {}
    return 0;
}
