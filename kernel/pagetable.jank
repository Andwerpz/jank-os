#include "pma.jank";
#include "memlayout.jank";

//right now, we kind of have to handle huge pages as BOOTBOOT initializes our kernel pagetable with hugepages.

[__GLOBAL_FIRST__] u64 PTE_PRESENT    = $u64 1 << $u64 0;
[__GLOBAL_FIRST__] u64 PTE_WRITEABLE  = $u64 1 << $u64 1;
[__GLOBAL_FIRST__] u64 PTE_USER       = $u64 1 << $u64 2;   //if set, user will be able to access
[__GLOBAL_FIRST__] u64 PTE_HUGEPG     = $u64 1 << $u64 7;
[__GLOBAL_FIRST__] u64 PTE_NX         = $u64 1 << $u64 63;  //*NOT* executable flag

u64* pte_get_addr(u64 pte) {
    return $u64* (pte & 0x7fffffffff000);
}

u64 pte_create_new(u64 flags) {
    u64* pt = pt_alloc_new();
    return ($u64 pt) | flags | PTE_PRESENT;
}

u64 pte_create_new(void* paddr, u64 flags) {
    return ($u64 paddr) | flags | PTE_PRESENT;
}

u64 vaddr_get_pt_ind(void* vaddr, i32 level) {
    passert(3 >= level && level >= 0, "vaddr_get_pt_ind() : invalid level");
    return (($u64 vaddr) & (0x1ff << $u64 (12 + level * 9))) >> $u64 (12 + level * 9);
}

u64* pt_alloc_new() {
    u64* pt = $u64* palloc();
    memset($void* pt, 0, PAGE_SIZE);
    return pt;
}

u64* pt_get_current() {
    u64* ret;
    asm!("mov %cr3, %rax");
    asm!("mov %rax, -8(%rbp)");
    return ret;
}

//given virtual page address, walks along the provided pagetable
//stops traversing at level 'level' and returns the PTE to the next page at that level
// if(create), then it creates stuff wherever needed
// else, it returns the PTE where it stopped (so PTE_PRESENT should be unset)
//updates level to indicate the actual level reached
u64 pt_walk(u64* pt, void* vaddr, i32& level, i32 create, u64 flags, u64 leaf_flags) {
    passert($u64 vaddr % PAGE_SIZE == $u64 0, "pt_walk() : vaddr must be page aligned");
    passert(3 >= level && level >= 0, "pt_walk() : invalid level");
    //serial_print("PT WALK VADDR : ");
    //serial_println(vaddr);
    i32 _level = level;
    level = 3;
    for(; level >= _level; level--){
        u64 ind = vaddr_get_pt_ind(vaddr, level);
        u64 pte = pt[ind];

        //serial_print("PT : ");
        //serial_print($void* pte);
        //serial_print(" ");
        //serial_println($void* ind);

        //check if pte is not present
        if(!(pte & PTE_PRESENT)) {
            //if create flag is not set, return non-present pte
            if(!create) return pte;

            //create new page and map it
            //serial_print("CREATE NEW PAGE : ");
            //serial_println($void* $u64 level);
            if(level != 0) pt[ind] = pte_create_new(flags);
            else pt[ind] = pte_create_new(leaf_flags);
            pte = pt[ind];
        }

        //check if this is a huge page
        if(level == 2 && $i32 (pte & PTE_HUGEPG)) {
            return pte;
        }
        if(level == 1 && $i32 (pte & PTE_HUGEPG)) {
            return pte;
        }

        //check if we should stop
        if(level == _level) {
            return pte;
        }

        //traverse down
        pt = pte_get_addr(pte);
    }

    panic("pt_walk() : should not exit for loop");
    return $u64 0;
}

//nocreate pt_walk
//panics if vaddr is not mapped to the specified level
u64 pt_walk(u64* pt, void* vaddr, i32& level) {
    u64 pte = pt_walk(pt, vaddr, level, 0, $u64 0, $u64 0);
    passert(pte & PTE_PRESENT, "pt_walk() : vaddr mapping not found");
    return pte;
}

i32 pt_is_vaddr_mapped(u64* pt, void* vaddr) {
    i32 level = 0;
    u64 pte = pt_walk(pt, vaddr, level, 0, $u64 0, $u64 0);
    return $i32 (pte & PTE_PRESENT);
}

//creates a pagetable mapping from vaddr -> paddr
//panics if vaddr is already mapped
void pt_map_page(u64* pt, void* vaddr, void* paddr, u64 leaf_flags) {
    //check if this page is already mapped
    passert(!pt_is_vaddr_mapped(pt, vaddr), "pt_map_page() : vaddr already mapped");

    //traverse pt to level 1
    i32 level = 1;
    u64 pte = pt_walk(pt, vaddr, level, 1, PTE_WRITEABLE, leaf_flags);
    passert(level == 1, "pt_map_page() : we should get level 1 pte");
    passert(!(pte & PTE_HUGEPG), "pt_map_page() : pte should not correspond to huge page");

    //traverse down to level 0 pt
    pt = pte_get_addr(pte);
    u64 ind = vaddr_get_pt_ind(vaddr, 0);
    passert(!(pt[ind] & PTE_PRESENT), "pt_map_page() : entry corresponding to physical page should not be present");

    //map the page
    pt[ind] = pte_create_new(paddr, leaf_flags);
}

//removes pagetable mapping corresponding to vaddr, does not free the physical page
//panics if vaddr is not mapped
void pt_unmap_page(u64* pt, void* vaddr) {
    //ensure this page is mapped
    passert(pt_is_vaddr_mapped(pt, vaddr), "pt_unmap_page() : vaddr not mapped");

    //traverse pt to level 1
    i32 level = 1;
    u64 pte = pt_walk(pt, vaddr, level);
    passert(level == 1, "pt_unmap_page() : we should get level 1 pte");
    passert(!(pte & PTE_HUGEPG), "pte_unmap_page() : pte should not correspond to huge page");

    //traverse down to level 0 pt
    pt = pte_get_addr(pte);
    u64 ind = vaddr_get_pt_ind(vaddr, 0);
    passert(pt[ind] & PTE_PRESENT, "pt_unmap_page() : entry corresponding to physical page should be present");

    //unmap the page
    pt[ind] = $u64 0;
}

//translates vaddr into paddr
void* pt_translate(u64* pt, void* vaddr) {
    i32 level = 0;
    u64 pte = pt_walk(pt, vaddr, level);
    passert(level < 3, "pt_translate() : resulting level should be one of 0, 1, 2");
    if(level == 2)      return $void* (($u64 pte_get_addr(pte) << $u64 18) + ($u64 vaddr & 0x3fffffff));
    else if(level == 1) return $void* (($u64 pte_get_addr(pte) << $u64  9) + ($u64 vaddr & 0x001fffff));
    else if(level == 0) return $void* (($u64 pte_get_addr(pte) << $u64  0) + ($u64 vaddr & 0x00000fff));
    panic("pt_translate() : unexpected level");
    return nullptr;
}

//recursively frees the entire pagetable and the underlying physical pages. 
//assumes that each physical page is only mapped once. 
void pt_free_pagetable(u64* pt, u64 level) {
    for(i32 i = 0; i < 512; i++){
        u64 pte = pt[i];
        if(!(pte & PTE_PRESENT)) continue;

        //if this is not a leaf, free subtree
        if(level) pt_free_pagetable(pte_get_addr(pte), level - $u64 1);

        //if this is a leaf, free the mem directly
        if(!level) pfree($void* pte_get_addr(pte));
    }

    //free this pt
    pfree($void* pt);
}

void pt_print(u64* pt, u64 level, i32 indent) {
    for(i32 i = 0; i < 512; i++){
        u64 pte = pt[i];
        if(!(pte & PTE_PRESENT)) continue;
        if(level) pt_print(pte_get_addr(pte), level - $u64 1, indent + 1);
    }
    for(i32 i = 0; i < indent; i++) serial_print("    ");
    serial_println(pt);
}

void pt_free_pagetable(u64* pt) {
    pt_free_pagetable(pt, $u64 3);
}
