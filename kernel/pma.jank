#include "panic.jank";
#include "memlayout.jank";

// Physical Memory Allocator
// uses a free list to keep track of userspace memory

//TODO use BOOTBOOT struct to find where kernel stuff is mapped in physical memory
[0] u64 BOOTBOOT_MMIO   = 0xfffffffff8000000;  // memory mapped IO virtual address
[0] u64 BOOTBOOT_FB     = 0xfffffffffc000000;  // frame buffer virtual address
[0] u64 BOOTBOOT_INFO   = 0xffffffffffe00000;  // bootboot struct virtual address
[0] u64 BOOTBOOT_ENV    = 0xffffffffffe01000;  // environment string virtual address
[0] u64 BOOTBOOT_CORE   = 0xffffffffffe02000;  // core loadable segment start

[0] phys_page_node* pma_head = $phys_page_node* nullptr;

struct phys_page_node {
    phys_page_node* prev;
}

struct MMapEnt {
    u64 ptr;
    u64 size;
}

struct x86_64 {
    u64 acpi_ptr;
    u64 smbi_ptr;
    u64 efi_ptr;
    u64 mp_ptr;
    u64 unused0;
    u64 unused1;
    u64 unused2;
    u64 unused3;
}

struct BOOTBOOT {
    // first 64 bytes is platform independent
    u8[4] magic;       // 'BOOT' magic
    u32   size;        // length of bootboot structure, minimum 128
    u8    protocol;    // 1, static addresses, see PROTOCOL_* and LOADER_* above
    u8    fb_type;     // framebuffer type, see FB_* above
    u16   numcores;    // number of processor cores
    u16   bspid;       // Bootsrap processor ID (Local APIC Id on x86_64)
    i16   timezone;    // in minutes -1440..1440
    u8[8] datetime;    // in BCD yyyymmddhhiiss UTC (independent to timezone)
    u64   initrd_ptr;  // ramdisk image position and size
    u64   initrd_size;
    u64   fb_ptr;      // framebuffer pointer and dimensions
    u32   fb_size;
    u32   fb_width;
    u32   fb_height;
    u32   fb_scanline;

    // the rest (64 bytes) is platform specific
    x86_64 x86_64_arch;

    // from 128th byte, MMapEnt[], more records may follow
    MMapEnt    mmap;
    // use like this:
    // * MMapEnt *mmap_ent = &bootboot.mmap; mmap_ent++;
    // * until you reach bootboot->size, while(mmap_ent < bootboot + bootboot->size)
}

void init_pma() {
    serial_print("init_pma\n");
    // get all MMAP_FREE
    BOOTBOOT* bootboot = $BOOTBOOT* BOOTBOOT_INFO;
    MMapEnt* mmap = $MMapEnt* @(bootboot->mmap);
    u8* end = $u8* ($u64 bootboot + $u64 bootboot->size);
    while($u64 mmap < $u64 end) {
        u64 type = mmap->size & $u64 0xf;
        if(type == $u64 1) {                                 // MMAP_FREE is defined as 1
            u64 addr = mmap->ptr;                            // physical address
            u64 size = mmap->size & $u64 0xfffffffffffffff0; // size in bytes

            serial_print("Found: \n");
            serial_print("Addr: ");
            serial_print_ptr($void* addr);
            serial_print("Size: ");
            serial_print_ptr($void* size);

            u64 base = (addr + PAGE_SIZE - $u64 1) & ~(PAGE_SIZE - $u64 1);
            // serial_print_ptr($void* base);
            while(base + PAGE_SIZE <= addr + size) {
                // serial_print_ptr($void* base);
                pfree($void* base);
                base += PAGE_SIZE;
            }
        }
        mmap = $MMapEnt* ($u64 mmap + $u64 sizeof(MMapEnt));
    }
    serial_print("done init pma\n");
}

//remove the top of the free list and return it
//if we're out of memory, panic
void* palloc() {
    if($u64 pma_head == $u64 nullptr){
        panic("palloc() : PMA out of memory");
    }

    void* ret = $void* pma_head;
    pma_head = pma_head->prev;
    return ret;
}

//just take the page and add it onto the top of the free list
//if the supplied address is not page aligned, panic
void pfree(void* page) {
    if(($u64 page % PAGE_SIZE) != $u64 0) {
        panic("pfree() : address not page aligned");
    }

    phys_page_node* nhead = $phys_page_node* page;
    nhead->prev = pma_head;
    pma_head = nhead;
}