
struct ExecutionContext {
    u64 rax;
    u64 rbx;
    u64 rcx;
    u64 rdx;
    u64 rsi;
    u64 rdi;
    u64 rbp;
    u64 rsp;
    u64 r8;
    u64 r9;
    u64 r10;
    u64 r11;
    u64 r12;
    u64 r13;
    u64 r14;
    u64 r15;
    u64 rip;
    u64 rflags;
    u64 pagetable;
}

//synchronously executes user program, when done returns the exit code
i32 exec_user_program(u64* user_pt, u64 entry_off) {
    //save kernel execution context
    asm!("movq %rax, %gs:0");
    asm!("movq %rbx, %gs:8");
    asm!("movq %rcx, %gs:16");
    asm!("movq %rdx, %gs:24");
    asm!("movq %rsi, %gs:32");
    asm!("movq %rdi, %gs:40");
    asm!("movq %rbp, %gs:48");
    asm!("movq %rsp, %gs:56");
    asm!("movq %r8,  %gs:64");
    asm!("movq %r9,  %gs:72");
    asm!("movq %r10, %gs:80");
    asm!("movq %r11, %gs:88");
    asm!("movq %r12, %gs:96");
    asm!("movq %r13, %gs:104");
    asm!("movq %r14, %gs:112");
    asm!("movq %r15, %gs:120");

    asm!("pushfq");
    asm!("popq %rax");
    asm!("movq %rax, %gs:136");

    //switch to user gs
    asm!("swapgs");

    //set user pagetable
    asm!("movq 24(%rbp), %rax");
    asm!("mov %rax, %cr3");

    //asm!("movq 16(%rbp), %rbx");
    //asm!("lea 1f(%rip), %rax");
    //asm!("1:");

    asm!("mov 16(%rbp), %rax");
    asm!("movq (%rax), %rax");

    asm!("mov $0x1B, %ax");
    asm!("mov %ax, %ds");
    asm!("mov %ax, %es");
    asm!("mov %ax, %fs");

    asm!("mov 16(%rbp), %rcx");         //new %rip
    asm!("mov $0x202, %r11");           //rflags
    asm!("mov $0x7ffffff00000, %rsp");  //manually set stack pointer
    asm!("sysretq");

    // -- RETURN CODE --
    //%rax should hold the exit status
    asm!("kernel_ret:");

    //we should be returning from sys_exit(), the kernel gs should already be active

    //set kernel pagetable
    asm!("movq %gs:160, %rbx");
    asm!("mov %rbx, %cr3");

    //load kernel execution context
    asm!("movq %gs:136, %rbx");
    asm!("pushq %rbx");
    asm!("popfq");

    //don't load %rax
    asm!("movq %gs:8,   %rbx");
    asm!("movq %gs:16,  %rcx");
    asm!("movq %gs:24,  %rdx");
    asm!("movq %gs:32,  %rsi");
    asm!("movq %gs:40,  %rdi");
    asm!("movq %gs:48,  %rbp");
    asm!("movq %gs:56,  %rsp");
    asm!("movq %gs:64,  %r8");
    asm!("movq %gs:72,  %r9");
    asm!("movq %gs:80,  %r10");
    asm!("movq %gs:88,  %r11");
    asm!("movq %gs:96,  %r12");
    asm!("movq %gs:104, %r13");
    asm!("movq %gs:112, %r14");
    asm!("movq %gs:120, %r15");

    i32 retval;
    asm!("movq %rax, -8(%rbp)");

    return retval;
}





