
void wrmsr(u32 reg, u64 val) {
    u32 low = $u32 val;
    u32 high = $u32 (val >> $u64 32);
    asm!("movl 24(%rbp), %ecx");
    asm!("movl -8(%rbp), %eax");
    asm!("movl -16(%rbp), %edx");
    asm!("wrmsr");
}

u64 rdmsr(u32 reg) {
    u32 low;
    u32 high;
    asm!("movl 16(%rbp), %ecx");   
    asm!("rdmsr");              
    asm!("movl %eax, -8(%rbp)");
    asm!("movl %edx, -16(%rbp)");
    return ($u64 high << $u64 32) | ($u64 low);
}

void outb(u16 port, u8 val) {
    asm!("movw 24(%rbp), %dx");
    asm!("movb 16(%rbp), %al");
    asm!("outb %al, %dx");
}

void outw(u16 port, u16 val) {
    asm!("movw 24(%rbp), %dx");
    asm!("movw 16(%rbp), %ax");
    asm!("outw %ax, %dx");
}

void outl(u16 port, u32 val) {
    asm!("movl 24(%rbp), %edx");
    asm!("movl 16(%rbp), %eax");
    asm!("outl %eax, %edx");
}

u8 inb(u16 port) {
    u8 ret;
    asm!("movw 16(%rbp), %dx");
    asm!("inb %dx, %al");
    asm!("movb %al, -8(%rbp)");
    return ret;
}

[__GLOBAL_FIRST__] u64 irq_disable_count = 0x0;
[__GLOBAL_FIRST__] u64 irq_saved_rflags;

void irq_disable() {
    if(irq_disable_count == 0x0) {
        asm!("pushfq");     //need to push RFLAGS before cli to save actual RFLAGS
        asm!("cli");        //do cli before popq to make global variable safe
        asm!("popq irq_saved_rflags(%rip)");
    }
    irq_disable_count ++;
}

void irq_enable() {
    passert(irq_disable_count != 0x0, "irq_enable() : unmatched irq_enable");
    irq_disable_count --;
    if(irq_disable_count == 0x0) {
        asm!("pushq irq_saved_rflags(%rip)");
        asm!("popfq");
    }
}

