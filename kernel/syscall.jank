
i32 init_syscall() {
    sout << "start init syscalls\n";

    //setup STAR
    //syscall and sysret automatically loads new segment from descriptor table based off of these values
    u64 SELECTOR_1 = 0x08;  //kernel code
    u64 SELECTOR_2 = 0x13;  //kernel data
    wrmsr(STAR_MSR, (SELECTOR_1 << $u64 32) | (SELECTOR_2 << $u64 48));
    sout << "STAR : " << $void* ((SELECTOR_1 << $u64 32) | (SELECTOR_2 << $u64 48)) << "\n";

    //setup LSTAR
    wrmsr(LSTAR_MSR, $u64 @syscall_handler_entry);

    //setup FMASK (clear interrupt flag on syscall entry)
    wrmsr(FMASK_MSR, 0x200);  // Clear IF (bit 9) on syscall
    
    //enable syscalls
    u64 efer = rdmsr(EFER_MSR);
    efer |= 0x1;
    wrmsr(EFER_MSR, efer);

    //setup GS_BASE
    u64* kernel_pt = pt_get_current();
    pt_map_page(kernel_pt, $void* GSDATA_PAGE, palloc(), PTE_WRITEABLE);

    GSData* gs_data = $GSData* GSDATA_PAGE;
    gs_data->kernel_pt = kernel_pt;
    wrmsr(GS_BASE_MSR, $u64 gs_data);

    sout << "done init syscalls\n";
    return 0;
}

// -- SYSCALL IDENTIFIERS --
//linux syscalls
[__GLOBAL_FIRST__] u64 SYS_MMAP         = $u64 9;
[__GLOBAL_FIRST__] u64 SYS_MUNMAP       = $u64 11;
[__GLOBAL_FIRST__] u64 SYS_SCHED_YIELD  = $u64 24;
[__GLOBAL_FIRST__] u64 SYS_GETPID       = $u64 39;
[__GLOBAL_FIRST__] u64 SYS_FORK         = $u64 57;
[__GLOBAL_FIRST__] u64 SYS_EXIT         = $u64 60;

//jank syscalls
[__GLOBAL_FIRST__] u64 SYS_SERIAL_PRINT = $u64 1000;

//gets the calling user process's saved trapframe when they just entered syscall
//assumes we saved trapframe near top of process kernel stack
trapframe* get_user_trapframe() {
    trapframe* ret;
    asm!("movq %gs:16, %rax");  //%rax now holds top of process kstack
    asm!("sub $176, %rax");     //176 = 152 + 24
    asm!("movq %rax, 8(%rbp)");
    return ret;
}   

//for now, this is just using the user stack to save the execution context
[__GLOBAL_FIRST__] extern u8 syscall_handler_entry;
void syscall_handler_asm() {    //this generates label "syscall_handler_asm:", but we shouldn't use it
    //cpu should put this stuff in these registers:
    //%rsp : user %rsp
    //%r11 : user RFLAGS
    //%rcx : user %rip
    
    asm!("syscall_handler_entry:");
    asm!("swapgs");

    //switch to process kstack
    asm!("movq %rsp, %gs:8");       //save original %rsp
    asm!("movq %gs:16, %rsp");      //%rsp now points to top of process kstack

    //push sysret info
    asm!("pushq %gs:8");     //user stack pointer
    asm!("pushq %r11");     //user rflags
    asm!("pushq %rcx");     //user RIP

    //push trapframe (make sure trapframe is correct size)
    asm!("sub $152, %rsp");
    asm!("movq %rax,  0(%rsp)");
    asm!("movq %rbx,  8(%rsp)");
    asm!("movq %rcx,  16(%rsp)");
    asm!("movq %rdx,  24(%rsp)");
    asm!("movq %rsi,  32(%rsp)");
    asm!("movq %rdi,  40(%rsp)");
    asm!("movq %rbp,  48(%rsp)");
    asm!("movq %gs:8, %rcx");
    asm!("movq %rcx,  56(%rsp)");
    asm!("movq %r8,   64(%rsp)");
    asm!("movq %r9,   72(%rsp)");
    asm!("movq %r10,  80(%rsp)");
    asm!("movq %r11,  88(%rsp)");
    asm!("movq %r12,  96(%rsp)");
    asm!("movq %r13,  104(%rsp)");
    asm!("movq %r14,  112(%rsp)");
    asm!("movq %r15,  120(%rsp)");
    asm!("movq %rcx,  128(%rsp)");
    asm!("movq %r11,  136(%rsp)");
    asm!("movq %cr3, %rcx");
    asm!("movq %rcx,  144(%rsp)");

    //call higher level syscall handler
    asm!("call syscall_handler");

    //pop trapframe
    asm!("add $8, %rsp");   //skip %rax
    asm!("popq %rbx");
    asm!("popq %rcx");
    asm!("popq %rdx");
    asm!("popq %rsi");
    asm!("popq %rdi");
    asm!("popq %rbp");
    asm!("add $8, %rsp");   //skip %rsp
    asm!("popq %r8");
    asm!("popq %r9");
    asm!("popq %r10");
    asm!("popq %r11");
    asm!("popq %r12");
    asm!("popq %r13");
    asm!("popq %r14");
    asm!("popq %r15");
    asm!("add $8, %rsp");   //skip %rip
    asm!("add $8, %rsp");   //skip RFLAGS
    asm!("add $8, %rsp");   //assume we're currently using user_pt

    //pop sysret info
    asm!("popq %rcx");  //user RIP
    asm!("popq %r11");  //user RFLAGS
    asm!("popq %rsp");  //switch back to user stack

    asm!("swapgs");
    asm!("sysretq");
}

//this should generate label 'syscall_handler:'
//when adding syscall preemption, interrupt flag should be enabled/disabled in here
u64 syscall_handler() {
    u64 sys_id;
    u64 arg1;
    u64 arg2;
    u64 arg3;
    u64 arg4;
    u64 arg5;
    u64 arg6;

    asm!("movq %rax, -8(%rbp)");
    asm!("movq %rdi, -16(%rbp)");
    asm!("movq %rsi, -24(%rbp)");
    asm!("movq %rdx, -32(%rbp)");
    asm!("movq %r10, -40(%rbp)");
    asm!("movq %r8, -48(%rbp)");
    asm!("movq %r9, -56(%rbp)");

    if(sys_id == SYS_EXIT) return sys_exit($i32 arg1);
    else if(sys_id == SYS_SCHED_YIELD) return sys_sched_yield();
    else if(sys_id == SYS_SERIAL_PRINT) return sys_serial_print($u8* arg1, arg2);
    else if(sys_id == SYS_MMAP) return $u64 sys_mmap($void* arg1, $u64 arg2, $u64 arg3, $u64 arg4, $i32 arg5, $u64 arg6);
    else if(sys_id == SYS_MUNMAP) return $u64 sys_munmap($void* arg1, $u64 arg2);
    else if(sys_id == SYS_GETPID) return sys_getpid();
    else if(sys_id == SYS_FORK) return sys_fork();

    panic("unrecognized sys_id");
    return $u64 -1;
}

//terminates the calling process
u64 sys_exit(i32 status) {
    //switch to kernel_pt
    pt_switch_to_kernel();

    //update cur process
    process* proc = get_cur_proc();
    proc->status = PROCESS_ZOMBIE;
    proc->exit_status = status;

    //point %rsp to top of kernel stack
    asm!("mov BOOTBOOT_STACK_TOP(%rip), %rsp");

    //jump to scheduler
    scheduler();

    return 0x0;
}

//returns the pid of the calling process
u64 sys_getpid() {
    return get_cur_proc()->pid;
}

//creates clone of this process, the 'child'. the calling process is the 'parent'
//in the parent, fork returns with pid of the child
//in the child, fork returns with 0
u64 sys_fork() {
    // switch to kernel_pt
    u64* user_pt = pt_get_current();
    pt_switch_to_kernel();

    process* proc = get_cur_proc();
    process* child = create_process(proc);

    u64 retval = 0x0;
    if(proc->pid != child->pid) {
        //we're in the parent process
        retval = child->pid;
    }

    // set user pt back
    pt_switch(user_pt);

    return retval;
}

//current process is yielding control to the scheduler
u64 sys_sched_yield() {
    panic("sys_sched_yield() : need to implement syscall preemption");
    
    //trigger timer interrupt
    asm!("int $0x20");

    return 0x0;
}

u64 sys_serial_print(u8* buf, u64 amt) {
    for(u64 i = 0x0; i < amt; i++) serial_print(buf[i]);
    return 0x0;
}

void* sys_mmap(void* addr, u64 len, u64 prot_flags, u64 map_flags, i32 fd, u64 offset) {
    // switch to kernel_pt
    u64* user_pt = pt_get_current();
    pt_switch_to_kernel();

    process* proc = get_cur_proc();

    // check if len is page aligned
    if(len % PAGE_SIZE != 0x0) {
        // set user pt back
        asm!("movq -8(%rbp), %rax");
        asm!("movq %rax, %cr3");

        return $void* $u64 -1;
    }

    // check if we've ran out of heap space
    if(proc->brk + len > USER_HEAP_TOP) {
        // set user pt back
        asm!("movq -8(%rbp), %rax");
        asm!("movq %rax, %cr3");

        return $void* $u64 -1;
    }

    // alloc mem
    void* vaddr = $void* proc->brk;
    for(u64 i = 0x0; i < len; i += PAGE_SIZE) {
        // void pt_alloc_and_map_page(u64* pt, void* vaddr, u64 leaf_flags)
        pt_alloc_and_map_page(user_pt, $void* ($u64 vaddr + i), map_flags | PTE_USER);
    }
    proc->brk += len;

    // set user pt back
    pt_switch(user_pt);

    return vaddr; 
}

i32 sys_munmap(void* addr, u64 len) {
    // switch to kernel_pt
    u64* user_pt = pt_get_current();
    pt_switch_to_kernel();

    if($u64 addr % PAGE_SIZE != 0x0 || len % PAGE_SIZE != 0x0) return -1;
    // void pt_unmap_page(u64* pt, void* vaddr)
    // void pfree(void* page)
    // i32 pt_is_vaddr_mapped(u64* pt, void* vaddr)
    // void* pt_translate(u64* pt, void* vaddr)
    for(u64 i = 0x0; i < len; i += PAGE_SIZE) {
        void* curr_vaddr = $void* ($u64 addr + i);
        if(!pt_is_vaddr_mapped(user_pt, curr_vaddr)) panic("sys_munmap: double free");
        void* paddr = pt_translate(user_pt, curr_vaddr);
        pt_unmap_page(user_pt, curr_vaddr);
        pfree(paddr);
    }

    // set user pt back
    pt_switch(user_pt);

    return 0;
}