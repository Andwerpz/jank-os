
i32 init_syscall() {
    sout << "start init syscalls\n";

    //setup STAR
    //syscall and sysret automatically loads new segment from descriptor table based off of these values
    u64 SELECTOR_1 = 0x08;  //kernel code
    u64 SELECTOR_2 = 0x13;  //kernel data
    wrmsr(STAR_MSR, (SELECTOR_1 << $u64 32) | (SELECTOR_2 << $u64 48));
    sout << "STAR : " << $void* ((SELECTOR_1 << $u64 32) | (SELECTOR_2 << $u64 48)) << "\n";

    //setup LSTAR
    wrmsr(LSTAR_MSR, $u64 @syscall_handler_entry);

    //setup FMASK (clear interrupt flag on syscall entry)
    wrmsr(FMASK_MSR, 0x200);  // Clear IF (bit 9) on syscall
    
    //enable syscalls
    u64 efer = rdmsr(EFER_MSR);
    efer |= 0x1;
    wrmsr(EFER_MSR, efer);

    //setup GS_BASE
    u64* kernel_pt = pt_get_current();
    pt_map_page(kernel_pt, $void* GSDATA_PAGE, palloc(), PTE_WRITEABLE);

    GSData* gs_data = $GSData* GSDATA_PAGE;
    gs_data->syscall_stack = $void* SYSCALL_STACK_TOP;
    gs_data->kernel_pt = kernel_pt;
    wrmsr(GS_BASE_MSR, $u64 gs_data);

    //alloc and map syscall stack
    for(u64 i = SYSCALL_STACK_BOTTOM; i < SYSCALL_STACK_TOP; i += PAGE_SIZE) {
        pt_map_page(kernel_pt, $void* i, palloc(), PTE_WRITEABLE);
    }

    sout << "done init syscalls\n";
    return 0;
}

// -- SYSCALL IDENTIFIERS --
//linux syscalls
[__GLOBAL_FIRST__] u64 SYS_EXIT     = $u64 60;
[__GLOBAL_FIRST__] u64 SYS_MMAP     = $u64 9;
[__GLOBAL_FIRST__] u64 SYS_MUNMAP   = $u64 11;

//jank syscalls
[__GLOBAL_FIRST__] u64 SYS_SERIAL_PRINT = $u64 1000;

[__GLOBAL_FIRST__] extern u8 syscall_handler_entry;
void syscall_handler_asm() {    //this generates label "syscall_handler_asm:", but we shouldn't use it
    asm!("syscall_handler_entry:");
    asm!("swapgs");

    //swap to syscall stack
    asm!("movq %rsp, %gs:168"); //save process stack 
    asm!("movq %gs:152, %rsp"); //load syscall stack

    //push sysret info
    asm!("pushq %gs:168");  //user stack pointer
    asm!("pushq %r11");     //user rflags
    asm!("pushq %rcx");     //user RIP

    //push all value registers (except for %rax)
    asm!("pushq %rbx");
    asm!("pushq %rcx");
    asm!("pushq %rdx");
    asm!("pushq %rsi");
    asm!("pushq %rdi");
    asm!("pushq %rbp");    
    asm!("pushq %r8");
    asm!("pushq %r9");
    asm!("pushq %r10");
    asm!("pushq %r11");
    asm!("pushq %r12");
    asm!("pushq %r13");
    asm!("pushq %r14");
    asm!("pushq %r15");

    //set kernel global base pointer (%r15)
    asm!("movq %gs:120, %r15");

    //call higher level syscall handler
    asm!("call syscall_handler");

    //pop all registers (except for %rax)
    asm!("popq %r15");
    asm!("popq %r14");
    asm!("popq %r13");
    asm!("popq %r12");
    asm!("popq %r11");
    asm!("popq %r10");
    asm!("popq %r9");
    asm!("popq %r8");
    asm!("popq %rbp");   
    asm!("popq %rdi");
    asm!("popq %rsi");
    asm!("popq %rdx");
    asm!("popq %rcx");
    asm!("popq %rbx");

    //pop sysret info
    asm!("popq %rcx");  //user RIP
    asm!("popq %r11");  //user RFLAGS
    asm!("popq %rsp");  //switch back to user stack

    asm!("swapgs");
    asm!("sysretq");
}

//this should generate label 'syscall_handler:'
u64 syscall_handler() {
    u64 sys_id;
    u64 arg1;
    u64 arg2;
    u64 arg3;
    u64 arg4;
    u64 arg5;
    u64 arg6;

    asm!("movq %rax, -8(%rbp)");
    asm!("movq %rdi, -16(%rbp)");
    asm!("movq %rsi, -24(%rbp)");
    asm!("movq %rdx, -32(%rbp)");
    asm!("movq %r10, -40(%rbp)");
    asm!("movq %r8, -48(%rbp)");
    asm!("movq %r9, -56(%rbp)");

    if(sys_id == SYS_EXIT) return sys_exit($i32 arg1);
    else if(sys_id == SYS_SERIAL_PRINT) return sys_serial_print($u8* arg1, arg2);
    else if(sys_id == SYS_MMAP) return $u64 sys_mmap($void* arg1, $u64 arg2, $u64 arg3, $u64 arg4, $i32 arg5, $u64 arg6);
    else if(sys_id == SYS_MUNMAP) return $u64 sys_munmap($void* arg1, $u64 arg2);

    panic("unrecognized sys_id");
    return $u64 -1;
}

//terminates the calling process
//this shouldn't even return, should directly jump to where the kernel left off. 
//in the future when we do scheduling, this should instead transition to the scheduler. 
u64 sys_exit(i32 status) {
    //just jump to kernel_ret
    //observe that we're already in kernel mode via syscall. 
    asm!("mov 16(%rbp), %rax");
    asm!("jmp kernel_ret");

    return 0x0;
}

u64 sys_serial_print(u8* buf, u64 amt) {
    for(u64 i = 0x0; i < amt; i++) serial_print(buf[i]);
    return 0x0;
}

void* sys_mmap(void* addr, u64 len, u64 prot_flags, u64 map_flags, i32 fd, u64 offset) {
    // save user pt
    u64* user_pt;
    asm!("movq %cr3, %rax");
    asm!("movq %rax, -8(%rbp)");

    // switch cr3 to kernel pt
    asm!("movq %gs:160, %rax");
    asm!("mov %rax, %cr3");

    if(len % PAGE_SIZE != 0x0) return $void* $u64 -1;

    void* vaddr = $void* curr_process->brk;

    for(u64 i = 0x0; i < len; i += PAGE_SIZE) {
        // void pt_alloc_and_map_page(u64* pt, void* vaddr, u64 leaf_flags)
        pt_alloc_and_map_page(user_pt, $void* ($u64 vaddr + i), map_flags | PTE_USER);
    }

    curr_process->brk += len;

    // set user pt back
    asm!("movq -8(%rbp), %rax");
    asm!("movq %rax, %cr3");

    return vaddr; 
}

i32 sys_munmap(void* addr, u64 len) {
    u64* user_pt;
    asm!("movq %cr3, %rax");
    asm!("movq %rax, -8(%rbp)");

    // switch cr3 to kernel pt
    asm!("movq %gs:160, %rax");
    asm!("mov %rax, %cr3");

    if($u64 addr % PAGE_SIZE != 0x0 || len % PAGE_SIZE != 0x0) return -1;
    // void pt_unmap_page(u64* pt, void* vaddr)
    // void pfree(void* page)
    // i32 pt_is_vaddr_mapped(u64* pt, void* vaddr)
    // void* pt_translate(u64* pt, void* vaddr)
    for(u64 i = 0x0; i < len; i += PAGE_SIZE) {
        void* curr_vaddr = $void* ($u64 addr + i);
        if(!pt_is_vaddr_mapped(user_pt, curr_vaddr)) panic("sys_munmap: double free");
        void* paddr = pt_translate(user_pt, curr_vaddr);
        pt_unmap_page(user_pt, curr_vaddr);
        pfree(paddr);
    }

    // set user pt back
    asm!("movq -8(%rbp), %rax");
    asm!("movq %rax, %cr3");

    return 0;
}