
void wrmsr(u32 reg, u64 val) {
    u32 low = $u32 val;
    u32 high = $u32 (val >> $u64 32);
    asm!("movl {reg}, %ecx");
    asm!("movl {low}, %eax");
    asm!("movl {high}, %edx");
    asm!("wrmsr");
}

u64 rdmsr(u32 reg) {
    u32 low;
    u32 high;
    asm!("movl {reg}, %ecx");   
    asm!("rdmsr");              
    asm!("movl %eax, {low}");
    asm!("movl %edx, {high}");
    return ($u64 high << $u64 32) | ($u64 low);
}

void outb(u16 port, u8 val) {
    asm!("movw {port}, %dx");
    asm!("movb {val}, %al");
    asm!("outb %al, %dx");
}

void outw(u16 port, u16 val) {
    asm!("movw {port}, %dx");
    asm!("movw {val}, %ax");
    asm!("outw %ax, %dx");
}

void outl(u16 port, u32 val) {
    asm!("movw {port}, %dx");
    asm!("movl {val}, %eax");
    asm!("outl %eax, %dx");
}

u8 inb(u16 port) {
    u8 ret;
    asm!("movw {port}, %dx");
    asm!("inb %dx, %al");
    asm!("movb %al, {ret}");
    return ret;
}

u32 inl(u16 port) {
    u32 ret;
    asm!("movw {port}, %dx");
    asm!("inl %dx, %eax");
    asm!("movl %eax, {ret}");
    return ret;
}

[__GLOBAL_FIRST__] u64 irq_disable_count = 0x0;
[__GLOBAL_FIRST__] u64 irq_saved_rflags;

void irq_disable() {
    if(irq_disable_count == 0x0) {  //this should be multiprocess safe?
        asm!("pushfq");     //need to push RFLAGS before cli to save actual RFLAGS
        asm!("cli");        //do cli before popq to make global variable safe
        asm!("popq irq_saved_rflags(%rip)");
    }
    irq_disable_count ++;
}

void irq_enable() {
    passert(irq_disable_count != 0x0, "irq_enable() : unmatched irq_enable");
    irq_disable_count --;
    if(irq_disable_count == 0x0) {
        asm!("pushq irq_saved_rflags(%rip)");
        asm!("popfq");
    }
}

//prints 16 separated bytes on a line
template<T>
void hexdump(T* _buf, u64 amt_bytes) {
    u8* buf = $u8* _buf;
    for(u64 i = 0x1; i <= amt_bytes; i++){
        u64 low = ($u64 buf[i - 0x1]) & 0xf;
        u64 high = ($u64 buf[i - 0x1] >> $u64 4) & 0xf;
        if(high < $u64 10) sout << ('0' + $u8 high);
        else sout << ('a' + $u8 high - $u8 10);
        if(low < $u64 10) sout << ('0' + $u8 low);
        else sout << ('a' + $u8 low - $u8 10);
        sout << " ";
        if(i % 0x10 == 0x0) sout << "\n";
    }
    if(amt_bytes % 0x10) sout << "\n";
}

//returns 0 on success, negative on failure
//expects kernel_pt to be active
i32 copy_to_user(pagetable_t user_pt, u8* kbuf, u8* ubuf, u64 amt) {
    u64 uptr = $u64 ubuf;
    uptr = (uptr / PAGE_SIZE) * PAGE_SIZE;  //round down to nearest page boundary
    u64 ubuf_end = $u64 ubuf + amt;
    u64 kptr = 0x0;

    while(uptr < ubuf_end) {
        //make sure page is mapped
        if(!pt_is_vaddr_mapped(user_pt, $void* uptr)) {
            return -ERR_FAULT;
        }

        //check flags
        u64 flags;
        void* paddr = pt_translate(user_pt, $void* uptr, flags);
        if(!(flags & PTE_WRITEABLE) || !(flags & PTE_USER)) {
            return -ERR_FAULT;
        }

        //copy data
        for(u64 i = 0x0; i < PAGE_SIZE; i++) {
            u64 cptr = uptr + i;
            if(cptr < $u64 ubuf || cptr >= ubuf_end) continue;
            ($u8* paddr)[i] = kbuf[kptr ++];
        }

        uptr += PAGE_SIZE;
    }

    return 0;
}

//returns 0 on success, negative on failure
//expects kernel_pt to be active
i32 copy_from_user(pagetable_t user_pt, u8* kbuf, u8* ubuf, u64 amt) {
    u64 uptr = $u64 ubuf;
    uptr = (uptr / PAGE_SIZE) * PAGE_SIZE;  //round down to nearest page boundary
    u64 ubuf_end = $u64 ubuf + amt;
    u64 kptr = 0x0;

    while(uptr < ubuf_end) {
        //make sure page is mapped
        if(!pt_is_vaddr_mapped(user_pt, $void* uptr)) {
            return -ERR_FAULT;
        }

        //check flags
        u64 flags;
        void* paddr = pt_translate(user_pt, $void* uptr, flags);
        if(!(flags & PTE_USER)) {
            return -ERR_FAULT;
        }

        //copy data
        for(u64 i = 0x0; i < PAGE_SIZE; i++) {
            u64 cptr = uptr + i;
            if(cptr < $u64 ubuf || cptr >= ubuf_end) continue;
            kbuf[kptr ++] = ($u8* paddr)[i];
        }

        uptr += PAGE_SIZE;
    }

    return 0;
}

