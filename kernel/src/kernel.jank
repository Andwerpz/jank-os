#include <math>;
#include <string>;
#include <jstring>;
#include <vector>;
#include <deque>;

#include "serial.jank";
#include "vga.jank";
#include "pma.jank";
#include "pagetable.jank";
#include "kmalloc.jank";
#include "shell.jank";
#include "globals.jank";
#include "elf.jank";
#include "gdt.jank";
#include "syscall.jank";
#include "utils.jank";
#include "idt.jank";
#include "scheduler.jank";
#include "pic.jank";
#include "file.jank";
#include "process.jank";
#include "ahci.jank";
#include "ext2fs.jank";
#include "acpi.jank";
#include "mutex.jank";
#include "vfs.jank";

[SERIAL] i32 INIT_SERIAL_STATUS = init_serial();
[PMA] i32 INIT_PMA_STATUS = init_pma();
[GDT] i32 INIT_GDT_STATUS = init_gdt();
[IDT] i32 INIT_IDT_STATUS = init_idt();
[PAGING] i32 INIT_PAGING_STATUS = init_paging();
[SYSCALL] i32 INIT_SYSCALL_STATUS = init_syscall();
[PIC] i32 INIT_PIC_STATUS = init_pic();

void check_paging_enabled() {
    u64 cr0;
    asm!("mov %cr0, %rax");
    asm!("mov %rax, {cr0}");
    if(cr0 & ($u64 1 << $u64 31)) serial_println("paging enabled");
    else serial_println("paging disabled");
}   

void check_syscall_enabled() {
    u64 x;
    asm!("mov $0x80000001, %eax");
    asm!("cpuid");
    asm!("mov %edx, {x}");
    passert(x & $u64 (1 << 11), "syscall instruction should be supported");
}

void mem_touch(u64 low, u64 high) {
    serial_print("TOUCHING : ");
    serial_print($void* low);
    serial_print(" ");
    serial_println($void* high);
    u8* mem = $u8* $u64 0;
    for(u64 i = low; i < high; i++){
        mem[i];
    }
    serial_println("done touching");
}

void print_mmap() {
    BOOTBOOT* bootboot = $BOOTBOOT* BOOTBOOT_INFO;
    MMapEnt* mmap = $MMapEnt* @(bootboot->mmap);
    u8* end = $u8* ($u64 bootboot + $u64 bootboot->size);
    while($u64 mmap < $u64 end) {
        u64 type = mmap->size & $u64 0xf;
        u64 addr = mmap->ptr;                            // physical address
        u64 size = mmap->size & $u64 0xfffffffffffffff0; // size in bytes

        serial_println("");
        serial_println("Found: ");
        serial_print("Addr: ");
        serial_println($void* addr);
        serial_print("Size: ");
        serial_println($void* size);
        serial_print("Type: ");
        serial_println($void* type);

        mmap = $MMapEnt* ($u64 mmap + $u64 sizeof(MMapEnt));
    }
}

void tests() {
    check_syscall_enabled();

    if(1) {
        print_mmap();
    }

    if(1) {
        pagetable_t kernel_pt = pt_get_current();
        void* fb_phys = pt_translate(kernel_pt, $void* BOOTBOOT_FB);
        serial_print("FB PHYS : ");
        serial_println(fb_phys);
        void* info_phys = pt_translate(kernel_pt, $void* BOOTBOOT_INFO);
        serial_print("INFO PHYS : ");
        serial_println(info_phys);
    }
    
    if(0) {
        u64 tlow  = 0x0000000007fe0000;
        u64 thigh = 0x0000000007fe0000;

        pagetable_t kernel_pt = pt_get_current();
        serial_print("kernel pt addr : ");
        serial_println(kernel_pt);

        passert(pt_is_vaddr_mapped(kernel_pt, $void* 0x10000), "bruh");

        mem_touch(tlow, thigh);
    }

    //check if all MMAP_FREE pages can be touched and are actually mapped
    if(0) {
        pagetable_t kernel_pt = pt_get_current();
        BOOTBOOT* bootboot = $BOOTBOOT* BOOTBOOT_INFO;
        MMapEnt* mmap = $MMapEnt* @(bootboot->mmap);
        u8* end = $u8* ($u64 bootboot + $u64 bootboot->size);
        while($u64 mmap < $u64 end) {
            u64 type = mmap->size & $u64 0xf;
            u64 addr = mmap->ptr;                            // physical address
            u64 size = mmap->size & $u64 0xfffffffffffffff0; // size in bytes

            if(type == $u64 1) {                      
                mem_touch(addr, addr + size);

                u64 base = (addr + PAGE_SIZE - $u64 1) & ~(PAGE_SIZE - $u64 1);
                while(base + PAGE_SIZE <= addr + size) {
                    passert(pt_is_vaddr_mapped(kernel_pt, $void* base), "this should be mapped");
                    base += PAGE_SIZE;
                }
            }   
            mmap = $MMapEnt* ($u64 mmap + $u64 sizeof(MMapEnt));
        }
    }

    //check if we can map new pages
    if(0) {
        pagetable_t kernel_pt = pt_get_current();
        u64 low  = 0x0000000100000000;
        u64 high = 0x0000000100100000;
        for(u64 i = low; i < high; i += PAGE_SIZE) {
            serial_print("MAP : ");
            serial_println($void* i);
            pt_map_page(kernel_pt, $void* i, $void* (i - low), PTE_WRITEABLE);
        }
        mem_touch(low, high);
        for(u64 i = low; i < high; i += PAGE_SIZE) {
            pt_unmap_page(kernel_pt, $void* i);
        }
        //mem_touch(low, high); //this should pagefault
    }

    //check if malloc works 
    if(1) {
        for(i32 i = 0; i < 10; i++){
            serial_println(i);
        }

        i32 N = 10;
        i32** dp = $i32** malloc($u64 N * sizeof(i32*));
        for(i32 i = 0; i < N; i = i + 1) dp[i] = $i32* malloc($u64 N * sizeof(i32));
        dp[0][0] = 1;
        for(i32 i = 0; i < N; i = i + 1) {
            for(i32 j = 0; j < N; j = j + 1) {
                if(i == 0 && j == 0) continue;
                dp[i][j] = 0;
                if(i != 0) dp[i][j] = dp[i][j] + dp[i - 1][j];
                if(j != 0) dp[i][j] = dp[i][j] + dp[i][j - 1];
            }
        }
        for(i32 i = 0; i < N; i = i + 1) {
            for(i32 j = 0; j < N; j = j + 1) {
                serial_print(dp[i][j]);
                serial_print(" ");
            }
            serial_print("\n");
        }

        serial_print("KHEAP PTR : ");
        serial_println($void* kheap_brk);
    }
}

void kernel_shell() {
    shell();
    shutdown_qemu();
}

void shutdown_qemu() {
    //qemu shutdown signal
    outw($u16 0x604, $u16 0x2000);
    panic("shutdown failed");
}   

void vfs_tests() {
    sout << "=== PRINTING FS TREE ===\n";
    vfs_print_tree(new string("/"));

    sout << "=== READ SHELL.JANK ===\n";
    while(1) {
        string path = new string("shell.jank");
        u64 size;
        if(vfs_get_size(path, size)) {
            sout << "get_size failed\n";
            break;
        }
        sout << "GET SIZE SUCCESS\n";
        sout << "FILE SIZE : " << size << "\n";
        u8* buf = $u8* malloc(size);
        u64 read_amt;
        if(vfs_read_file(path, buf, size, 0x0, read_amt)) {
            sout << "file read failed\n";
            break;
        }
        sout << "CONTENTS : \n";
        sout << buf << "\n";
        sout << "READ AMT : " << read_amt << "\n";
        free($void* buf, size);

        break;
    }
}

i32 main() {
    init_acpi();
    init_serial_file_ops();
    init_vfs();
    init_ahci();

    vfs_tests();

    shutdown_qemu();
    // kernel_shell();

    //tests();    

    init_scheduler();

    //shouldn't get here
    panic("init scheduler failed");
    
    return 0;
}
