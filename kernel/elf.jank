
[__GLOBAL_FIRST__] u8 ELFMAG0 = $u8 0x7f;
[__GLOBAL_FIRST__] u8 ELFMAG1 = 'E';
[__GLOBAL_FIRST__] u8 ELFMAG2 = 'L';
[__GLOBAL_FIRST__] u8 ELFMAG3 = 'F';

//ELF header
struct ELF64_Ehdr{
    u8[16]  e_ident;
    u16     e_type;         //file type
    u16     e_machine;      //required architecture for this file
    u32     e_version;      
    u64     e_entry;        //virtual address of entry point
    u64     e_phoff;        //program header table file offset
    u64     e_shoff;        //section header table file offset
    u32     e_flags;        //processor specific flags, no flags have been defined as of now. 
    u16     e_ehsize;       //ELF header size in bytes
    u16     e_phentsize;    //program header entry size, all entries are the same size
    u16     e_phnum;        //number of program header entries. 
                            //If number of headers is >= 0xffff, the real number of entries in the
                            //program header table is held in the sh_info member of the
                            //initial entry in section header table. Otherwise, sh_info = 0. 
    u16     e_shentsize;    //section header entry size, all entries are the same size
    u16     e_shnum;        //number of section header entries.
                            //If number of headers is >= 0xff00, e_shnum will hold 0 and the
                            //real number of entries will be held by sh_size member of the
                            //initial entry in the section header table. Otherwise, sh_size = 0
    u16     e_shstrndx;     //section header table index of the entry associated with the section name string table.
}

//program header
struct ELF64_Phdr {
    u32     p_type;         
    u32     p_flags;        //bit mask of flags, PF_X, PF_W, PF_R. 
    u64     p_offset;       //offset from the beginning of the file at which the first byte of this segment resides
    u64     p_vaddr;        //virtual address at which the first byte of this segment resides
    u64     p_paddr;        //segment's physical address (should not be relevant for user programs)
    u64     p_filesz;       //number of bytes this segment occupies in the file
    u64     p_memsz;        //number of bytes this segment should occupy in memory when loaded
    u64     p_align;        //if p_align != 0, then p_offset % p_align == p_vaddr % p_align must be true
}

//section header
struct ELF64_Shdr {
    u32     sh_name;        //index into the section header string table, giving location of null terminated string
    u32     sh_type;        
    u64     sh_flags;       //bit mask of flags
    u64     sh_addr;        //if this section is in the memory image, holds the address at which the section's first byte resides
    u64     sh_offset;      //holds byte offset from the beginning of the file to the first byte in the section
    u64     sh_size;        //section size in bytes. 
    u32     sh_link;        //section header table index link?
    u32     sh_info;        //extra info
    u64     sh_addralign;   //sh_addr % sh_addralign = 0 if sh_addralign != 0. 
    u64     sh_entsize;     //if this section holds fixed sized entries, this gives the size in bytes for each entry. Otherwise, this is 0
}

//symbol
struct ELF64_Sym {
    u32     st_name;        //index into object file's symbol string table. If the value is non-zero, this points to a name
    u8      st_info;        
    u8      st_other;       //defines symbol visibility
    u16     st_shndx;       //index of section that this symbol is defined in relation to
    u64     st_value;       //value of symbol
    u64     st_size;        //if nonzero, holds associated size of symbol
}

//takes in a byte buffer that represents an ELF file, maps it to the provided pagetable
//entry point virtual address is returned through out_entry_off
//returns 0 on success
i32 load_elf(u8* buf, u64 size, u64* pt, u64& out_entry_off) {
    //check if there's even enough room for the ELF header
    if(size < sizeof(ELF64_Ehdr)) {
        return 1;
    }

    //load ELF header and check magic values
    ELF64_Ehdr* elf_header = $ELF64_Ehdr* buf;
    if( elf_header->e_ident[0] != ELFMAG0 || 
        elf_header->e_ident[1] != ELFMAG1 ||
        elf_header->e_ident[2] != ELFMAG2 ||
        elf_header->e_ident[3] != ELFMAG3) {
        return 1;
    }

    //make sure program header table fits within ELF
    u64 phnum = $u64 elf_header->e_phnum;
    if(elf_header->e_phoff + $u64 elf_header->e_phentsize * phnum > size) {
        return 1;
    }

    //TODO load actual program header num if phnum == 0xffff
    passert(phnum != 0xffff, "need to load in actual program header num");

    //go through program header table
    sout << "Program header count : " << elf_header->e_phnum << "\n";
    ELF64_Phdr* p_headers = $ELF64_Phdr* @(buf[elf_header->e_phoff]);
    for(u64 i = 0x0; i < phnum; i++){
        ELF64_Phdr* p_header = @(p_headers[i]);
        u64 flags = $u64 p_header->p_flags;
        u64 offset = p_header->p_offset;
        u64 vaddr = p_header->p_vaddr;
        u64 paddr = p_header->p_paddr;
        u64 filesz = p_header->p_filesz;
        u64 memsz = p_header->p_memsz;
        u64 align = p_header->p_align;

        sout << "Program header : \n";
        sout << "flags : " << flags << "\n";
        sout << "offset : " << $void* offset << "\n";
        sout << "vaddr : " << $void* vaddr << "\n";
        sout << "paddr : " << $void* paddr << "\n";
        sout << "filesz : " << filesz << "\n";
        sout << "memsz : " << memsz << "\n";
        sout << "align : " << align << "\n";
    }

    //save entry point to output
    out_entry_off = elf_header->e_entry;

    return 0;
}