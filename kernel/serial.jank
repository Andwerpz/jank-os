#include <string>;

[__GLOBAL_FIRST__] u16 COM1 = $u16 0x3f8;

[SERIAL_STREAM] serial_ostream sout = new serial_ostream();
[SERIAL_STREAM] serial_istream sin = new serial_istream();

struct serial_ostream {}

serial_ostream& operator<<(serial_ostream& stream, u8* s) {
    serial_print(s);
    return stream;
}

serial_ostream& operator<<(serial_ostream& stream, u8 c) {
    serial_print(c);
    return stream;
}

serial_ostream& operator<<(serial_ostream& stream, i32 x) {
    serial_print(x);
    return stream;
}

serial_ostream& operator<<(serial_ostream& stream, u64 x) {
    serial_print(x);
    return stream;
}

serial_ostream& operator<<(serial_ostream& stream, u32 x) {
    serial_print(x);
    return stream;
}

serial_ostream& operator<<(serial_ostream& stream, u16 x) {
    serial_print(x);
    return stream;
}

serial_ostream& operator<<(serial_ostream& stream, string& s) {
    serial_print(s);
    return stream;
}

template<T>
serial_ostream& operator<<(serial_ostream& stream, T* p) {
    serial_print(p);
    return stream;
}

struct serial_istream {
    u8 next_char() {
        return read_serial();
    }

    i32 is_whitespace(u8 c) {
        return c == ' ' || c == '\n' || c == '\t' || c == '\r';
    }

    //if we hit eof before a token, returns empty string
    string next_token() {
        string tok = new string();

        i32 found_tok = 0;
        while(1) {
            u8 c = this.next_char();
            if(this.is_whitespace(c)) {
                if(found_tok) break;
            }
            else {
                found_tok = 1;
                tok.push_back(c);
            }
        }

        if(!found_tok) return new string();
        return tok;
    }

    string next_line() {
        string line = new string();

        i32 found_line = 0;
        while(1) {
            u8 c = this.next_char();
            if(c == '\r') {
                if(found_line) break;
            }
            else {
                found_line = 1;
                if(c == '\n') continue;
                line.push_back(c);
            }
        }

        if(!found_line) return new string();
        return line;
    }
}

serial_istream& operator>>(serial_istream& stream, string& s) {
    s = stream.next_token();
    return stream;
}

serial_istream& operator>>(serial_istream& stream, u64& x) {
    x = stou64(stream.next_token());
    return stream;
}

serial_istream& operator>>(serial_istream& stream, i32& x) {
    x = stoi32(stream.next_token());
    return stream;
}

void outb(u16 port, u8 val) {
    asm!("movw 24(%rbp), %dx");
    asm!("movb 16(%rbp), %al");
    asm!("outb %al, %dx");
}

void outw(u16 port, u16 val) {
    asm!("movw 24(%rbp), %dx");
    asm!("movw 16(%rbp), %ax");
    asm!("outw %ax, %dx");
}

u8 inb(u16 port) {
    u8 ret;
    asm!("movw 16(%rbp), %dx");
    asm!("inb %dx, %al");
    asm!("movb %al, -8(%rbp)");
    return ret;
}

i32 init_serial() {
    outb(COM1 + $u16 1, $u8 0x00);    // Disable all interrupts
    outb(COM1 + $u16 3, $u8 0x80);    // Enable DLAB (set baud rate divisor)
    outb(COM1 + $u16 0, $u8 0x03);    // Set divisor to 3 (lo byte) 38400 baud
    outb(COM1 + $u16 1, $u8 0x00);    //                  (hi byte)
    outb(COM1 + $u16 3, $u8 0x03);    // 8 bits, no parity, one stop bit
    outb(COM1 + $u16 2, $u8 0xc7);    // Enable FIFO, clear them, with 14-byte threshold
    outb(COM1 + $u16 4, $u8 0x0b);    // IRQs enabled, RTS/DSR set
    outb(COM1 + $u16 4, $u8 0x1e);    // Set in loopback mode, test the serial chip
    outb(COM1 + $u16 0, $u8 0xae);    // Test serial chip (send byte 0xAE and check if serial returns same byte)

    // Check if serial is faulty (i.e: not same byte as sent)
    if(inb(COM1 + $u16 0) != $u8 0xae) {
        return $i32 1;
    }

    // If serial is not faulty set it in normal operation mode
    // (not-loopback with IRQs enabled and OUT#1 and OUT#2 bits enabled)
    outb(COM1 + $u16 4, $u8 0x0f);

    return $i32 0;
}

u8 is_transmit_empty() {
    return inb(COM1 + $u16 5) & $u8 0x20;
}

void write_serial(u8 a) {
    if(a == '\n') {
        while(is_transmit_empty() == $u8 0) {}
        outb(COM1, '\r');
    }
    while(is_transmit_empty() == $u8 0) {}
    outb(COM1, a);
}

void serial_print(u8 c) {
    write_serial(c);
} 

void serial_print(u8* str) {
    while(*str != $u8 0) {
        write_serial(*str);
        str = $u8* ($u64 str + $u64 1);
    }
}

void serial_print(string s) {
    for(u64 i = 0x0; i < s.size(); i++){
        write_serial(s[i]);
    }
}

void serial_print(u64 x) {
    serial_print(to_string(x));
}

void serial_print(u32 x){
    serial_print(to_string(x));
}

void serial_print(u16 x) {
    serial_print(to_string(x));
}

void serial_print(i32 x) {
    serial_print(to_string(x));
}

template<T>
void serial_print(T* ptr) {
    u64 val = $u64 ptr;
    u64 mask = 0b1111;
    for(i32 i = 15; i >= 0; i--){
        u64 dig = (val & (mask << ($u64 i * $u64 4))) >> ($u64 i * $u64 4);
        u8 c;
        if(dig < $u64 10) {
            c = '0' + $u8 dig;
        }
        else {
            c = 'a' + $u8 dig - $u8 10;
        }
        write_serial(c);
    }
}

template<T>
void serial_println(T x) {
    serial_print(x);
    serial_print("\n");
}

u8 serial_received() {
    return inb(COM1 + $u16 5) & $u8 1;
}

u8 read_serial() {
    while(serial_received() == $u8 0) {}
    u8 c = inb(COM1);
    write_serial(c);
    if(c == '\r') write_serial('\n');
    return c;
}